{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { EditorOptions } from '../../../common/config/editorOptions.js';\nimport { CursorState } from '../../../common/cursorCommon.js';\nimport { WordOperations } from '../../../common/cursor/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../../platform/contextkey/common/contextkeys.js';\nexport class MoveWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._inSelectionMode = opts.inSelectionMode;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(117 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const result = selections.map((sel) => {\n            const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n            const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n            return this._moveTo(sel, outPosition, this._inSelectionMode);\n        });\n        model.pushStackElement();\n        editor._getViewModel().setCursorStates('moveWordCommand', 3 /* Explicit */, result.map(r => CursorState.fromModelSelection(r)));\n        if (result.length === 1) {\n            const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n            editor.revealPosition(pos, 0 /* Smooth */);\n        }\n    }\n    _moveTo(from, to, inSelectionMode) {\n        if (inSelectionMode) {\n            // move just position\n            return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n        }\n        else {\n            // move everything\n            return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n        }\n    }\n}\nexport class WordLeftCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType) {\n        return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n    }\n}\nexport class WordRightCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType) {\n        return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n    }\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeft extends WordLeftCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 1 /* WordStartFast */,\n            id: 'cursorWordLeft',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */,\n                mac: { primary: 512 /* Alt */ | 15 /* LeftArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 1 /* WordStartFast */,\n            id: 'cursorWordLeftSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */,\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 15 /* LeftArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityLeft',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityLeftSelect',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordStartRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRight extends WordRightCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndRight',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */,\n                mac: { primary: 512 /* Alt */ | 17 /* RightArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndRightSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */,\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 17 /* RightArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityRight',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityRightSelect',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class DeleteWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._whitespaceHeuristics = opts.whitespaceHeuristics;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(117 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */);\n        const autoClosingQuotes = editor.getOption(8 /* autoClosingQuotes */);\n        const autoClosingPairs = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getAutoClosingPairs();\n        const viewModel = editor._getViewModel();\n        const commands = selections.map((sel) => {\n            const deleteRange = this._delete({\n                wordSeparators,\n                model,\n                selection: sel,\n                whitespaceHeuristics: this._whitespaceHeuristics,\n                autoClosingDelete: editor.getOption(6 /* autoClosingDelete */),\n                autoClosingBrackets,\n                autoClosingQuotes,\n                autoClosingPairs,\n                autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()\n            }, this._wordNavigationType);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        let r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        return new Range(1, 1, 1, 1);\n    }\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        let r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        const lineCount = ctx.model.getLineCount();\n        const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n        return new Range(lineCount, maxColumn, lineCount, maxColumn);\n    }\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordStartLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordEndLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordLeft',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* CtrlCmd */ | 1 /* Backspace */,\n                mac: { primary: 512 /* Alt */ | 1 /* Backspace */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordStartRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordEndRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordRight',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* CtrlCmd */ | 20 /* Delete */,\n                mac: { primary: 512 /* Alt */ | 20 /* Delete */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteInsideWord extends EditorAction {\n    constructor() {\n        super({\n            id: 'deleteInsideWord',\n            precondition: EditorContextKeys.writable,\n            label: nls.localize('deleteInsideWord', \"Delete Word\"),\n            alias: 'Delete Word'\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(117 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const commands = selections.map((sel) => {\n            const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);\n",
      "start": 1711096854636,
      "end": 1711096854836,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096854837,
      "end": 1711096854837,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096854837,
      "end": 1711096854839,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096854839,
      "end": 1711096854839,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096854839,
      "end": 1711096854839,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096854839,
      "end": 1711096854839,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096854839,
      "end": 1711096854839,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096854839,
      "end": 1711096854839,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096854839,
      "end": 1711096854840,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096854840,
      "end": 1711096854840,
      "order": "normal"
    }
  ]
}
