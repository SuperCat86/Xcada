{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/syntaxRangeProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst foldingContext = {};\nexport const ID_SYNTAX_PROVIDER = 'syntax';\nexport class SyntaxRangeProvider {\n    constructor(editorModel, providers, handleFoldingRangesChange, limit) {\n        this.editorModel = editorModel;\n        this.providers = providers;\n        this.limit = limit;\n        this.id = ID_SYNTAX_PROVIDER;\n        for (const provider of providers) {\n            if (typeof provider.onDidChange === 'function') {\n                if (!this.disposables) {\n                    this.disposables = new DisposableStore();\n                }\n                this.disposables.add(provider.onDidChange(handleFoldingRangesChange));\n            }\n        }\n    }\n    compute(cancellationToken, notifyTooManyRegions) {\n        return collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then(ranges => {\n            if (ranges) {\n                let res = sanitizeRanges(ranges, this.limit, notifyTooManyRegions);\n                return res;\n            }\n            return null;\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this.disposables) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\nfunction collectSyntaxRanges(providers, model, cancellationToken) {\n    let rangeData = null;\n    let promises = providers.map((provider, i) => {\n        return Promise.resolve(provider.provideFoldingRanges(model, foldingContext, cancellationToken)).then(ranges => {\n            if (cancellationToken.isCancellationRequested) {\n                return;\n            }\n            if (Array.isArray(ranges)) {\n                if (!Array.isArray(rangeData)) {\n                    rangeData = [];\n                }\n                let nLines = model.getLineCount();\n                for (let r of ranges) {\n                    if (r.start > 0 && r.end > r.start && r.end <= nLines) {\n                        rangeData.push({ start: r.start, end: r.end, rank: i, kind: r.kind });\n                    }\n                }\n            }\n        }, onUnexpectedExternalError);\n    });\n    return Promise.all(promises).then(_ => {\n        return rangeData;\n    });\n}\nexport class RangesCollector {\n    constructor(foldingRangesLimit, _notifyTooManyRegions) {\n        this._notifyTooManyRegions = _notifyTooManyRegions;\n        this._startIndexes = [];\n        this._endIndexes = [];\n        this._nestingLevels = [];\n        this._nestingLevelCounts = [];\n        this._types = [];\n        this._length = 0;\n        this._foldingRangesLimit = foldingRangesLimit;\n    }\n    add(startLineNumber, endLineNumber, type, nestingLevel) {\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n            return;\n        }\n        let index = this._length;\n        this._startIndexes[index] = startLineNumber;\n        this._endIndexes[index] = endLineNumber;\n        this._nestingLevels[index] = nestingLevel;\n        this._types[index] = type;\n        this._length++;\n        if (nestingLevel < 30) {\n            this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;\n        }\n    }\n    toIndentRanges() {\n        if (this._length <= this._foldingRangesLimit) {\n            let startIndexes = new Uint32Array(this._length);\n            let endIndexes = new Uint32Array(this._length);\n            for (let i = 0; i < this._length; i++) {\n                startIndexes[i] = this._startIndexes[i];\n                endIndexes[i] = this._endIndexes[i];\n            }\n            return new FoldingRegions(startIndexes, endIndexes, this._types);\n        }\n        else {\n            if (this._notifyTooManyRegions) {\n                this._notifyTooManyRegions(this._foldingRangesLimit);\n            }\n            let entries = 0;\n            let maxLevel = this._nestingLevelCounts.length;\n            for (let i = 0; i < this._nestingLevelCounts.length; i++) {\n                let n = this._nestingLevelCounts[i];\n                if (n) {\n                    if (n + entries > this._foldingRangesLimit) {\n                        maxLevel = i;\n                        break;\n                    }\n                    entries += n;\n                }\n            }\n            let startIndexes = new Uint32Array(this._foldingRangesLimit);\n            let endIndexes = new Uint32Array(this._foldingRangesLimit);\n            let types = [];\n            for (let i = 0, k = 0; i < this._length; i++) {\n                let level = this._nestingLevels[i];\n                if (level < maxLevel || (level === maxLevel && entries++ < this._foldingRangesLimit)) {\n                    startIndexes[k] = this._startIndexes[i];\n                    endIndexes[k] = this._endIndexes[i];\n                    types[k] = this._types[i];\n                    k++;\n                }\n            }\n            return new FoldingRegions(startIndexes, endIndexes, types);\n        }\n    }\n}\nexport function sanitizeRanges(rangeData, limit, notifyTooManyRegions) {\n    let sorted = rangeData.sort((d1, d2) => {\n        let diff = d1.start - d2.start;\n        if (diff === 0) {\n            diff = d1.rank - d2.rank;\n        }\n        return diff;\n    });\n    let collector = new RangesCollector(limit, notifyTooManyRegions);\n    let top = undefined;\n    let previous = [];\n    for (let entry of sorted) {\n        if (!top) {\n            top = entry;\n            collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n        }\n        else {\n            if (entry.start > top.start) {\n                if (entry.end <= top.end) {\n                    previous.push(top);\n                    top = entry;\n                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n                }\n                else {\n                    if (entry.start > top.end) {\n                        do {\n                            top = previous.pop();\n                        } while (top && entry.start > top.end);\n                        if (top) {\n                            previous.push(top);\n                        }\n                        top = entry;\n                    }\n                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n                }\n            }\n        }\n    }\n    return collector.toIndentRanges();\n}\n",
      "start": 1711096855664,
      "end": 1711096855774,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855774,
      "end": 1711096855774,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855774,
      "end": 1711096855775,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855775,
      "end": 1711096855775,
      "order": "normal"
    }
  ]
}
