{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/parts/storage/common/storage.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../common/types.js';\nvar StorageState;\n(function (StorageState) {\n    StorageState[StorageState[\"None\"] = 0] = \"None\";\n    StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n    StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n})(StorageState || (StorageState = {}));\nexport class Storage extends Disposable {\n    constructor(database, options = Object.create(null)) {\n        super();\n        this.database = database;\n        this.options = options;\n        this._onDidChangeStorage = this._register(new Emitter());\n        this.onDidChangeStorage = this._onDidChangeStorage.event;\n        this.state = StorageState.None;\n        this.cache = new Map();\n        this.flushDelayer = new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY);\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        this.whenFlushedCallbacks = [];\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n    }\n    onDidChangeItemsExternal(e) {\n        var _a, _b;\n        // items that change external require us to update our\n        // caches with the values. we just accept the value and\n        // emit an event if there is a change.\n        (_a = e.changed) === null || _a === void 0 ? void 0 : _a.forEach((value, key) => this.accept(key, value));\n        (_b = e.deleted) === null || _b === void 0 ? void 0 : _b.forEach(key => this.accept(key, undefined));\n    }\n    accept(key, value) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        let changed = false;\n        // Item got removed, check for deletion\n        if (isUndefinedOrNull(value)) {\n            changed = this.cache.delete(key);\n        }\n        // Item got updated, check for change\n        else {\n            const currentValue = this.cache.get(key);\n            if (currentValue !== value) {\n                this.cache.set(key, value);\n                changed = true;\n            }\n        }\n        // Signal to outside listeners\n        if (changed) {\n            this._onDidChangeStorage.fire(key);\n        }\n    }\n    get(key, fallbackValue) {\n        const value = this.cache.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value;\n    }\n    getBoolean(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value === 'true';\n    }\n    getNumber(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return parseInt(value, 10);\n    }\n    set(key, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state === StorageState.Closed) {\n                return; // Return early if we are already closed\n            }\n            // We remove the key for undefined/null values\n            if (isUndefinedOrNull(value)) {\n                return this.delete(key);\n            }\n            // Otherwise, convert to String and store\n            const valueStr = String(value);\n            // Return early if value already set\n            const currentValue = this.cache.get(key);\n            if (currentValue === valueStr) {\n                return;\n            }\n            // Update in cache and pending\n            this.cache.set(key, valueStr);\n            this.pendingInserts.set(key, valueStr);\n            this.pendingDeletes.delete(key);\n            // Event\n            this._onDidChangeStorage.fire(key);\n            // Accumulate work by scheduling after timeout\n            return this.doFlush();\n        });\n    }\n    delete(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state === StorageState.Closed) {\n                return; // Return early if we are already closed\n            }\n            // Remove from cache and add to pending\n            const wasDeleted = this.cache.delete(key);\n            if (!wasDeleted) {\n                return; // Return early if value already deleted\n            }\n            if (!this.pendingDeletes.has(key)) {\n                this.pendingDeletes.add(key);\n            }\n            this.pendingInserts.delete(key);\n            // Event\n            this._onDidChangeStorage.fire(key);\n            // Accumulate work by scheduling after timeout\n            return this.doFlush();\n        });\n    }\n    get hasPending() {\n        return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n    }\n    flushPending() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasPending) {\n                return; // return early if nothing to do\n            }\n            // Get pending data\n            const updateRequest = { insert: this.pendingInserts, delete: this.pendingDeletes };\n            // Reset pending data for next run\n            this.pendingDeletes = new Set();\n            this.pendingInserts = new Map();\n            // Update in storage and release any\n            // waiters we have once done\n            return this.database.updateItems(updateRequest).finally(() => {\n                var _a;\n                if (!this.hasPending) {\n                    while (this.whenFlushedCallbacks.length) {\n                        (_a = this.whenFlushedCallbacks.pop()) === null || _a === void 0 ? void 0 : _a();\n                    }\n                }\n            });\n        });\n    }\n    doFlush(delay) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.flushDelayer.trigger(() => this.flushPending(), delay);\n        });\n    }\n    dispose() {\n        this.flushDelayer.dispose();\n        super.dispose();\n    }\n}\nStorage.DEFAULT_FLUSH_DELAY = 100;\nexport class InMemoryStorageDatabase {\n    constructor() {\n        this.onDidChangeItemsExternal = Event.None;\n        this.items = new Map();\n    }\n    updateItems(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (request.insert) {\n                request.insert.forEach((value, key) => this.items.set(key, value));\n            }\n            if (request.delete) {\n                request.delete.forEach(key => this.items.delete(key));\n            }\n        });\n    }\n}\n",
      "start": 1711096856132,
      "end": 1711096856212,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856212,
      "end": 1711096856213,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856213,
      "end": 1711096856213,
      "order": "normal"
    }
  ]
}
