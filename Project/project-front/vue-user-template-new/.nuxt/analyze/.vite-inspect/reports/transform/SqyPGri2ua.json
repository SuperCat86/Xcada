{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/common/extpath.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { normalize, posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { startsWithIgnoreCase } from './strings.js';\nexport function isPathSeparator(code) {\n    return code === 47 /* Slash */ || code === 92 /* Backslash */;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === 58 /* Colon */) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\n/**\n * @deprecated please use `IUriIdentityService.extUri.isEqualOrParent` instead. If\n * you are in a context without services, consider to pass down the `extUri` from the\n * outside, or use `extUriBiasedIgnorePathCase` if you know what you are doing.\n */\nexport function isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true; // same path, different casing\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n    return char0 >= 65 /* A */ && char0 <= 90 /* Z */ || char0 >= 97 /* a */ && char0 <= 122 /* z */;\n}\nexport function isRootOrDriveLetter(path) {\n    const pathNormalized = normalize(path);\n    if (isWindows) {\n        if (path.length > 3) {\n            return false;\n        }\n        return hasDriveLetter(pathNormalized) &&\n            (path.length === 2 || pathNormalized.charCodeAt(2) === 92 /* Backslash */);\n    }\n    return pathNormalized === posix.sep;\n}\nexport function hasDriveLetter(path, continueAsWindows) {\n    const isWindowsPath = ((continueAsWindows !== undefined) ? continueAsWindows : isWindows);\n    if (isWindowsPath) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* Colon */;\n    }\n    return false;\n}\n",
      "start": 1711096856800,
      "end": 1711096856898,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856898,
      "end": 1711096856898,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856898,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "normal"
    }
  ]
}
