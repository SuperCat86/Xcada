{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n",
      "start": 1711096855364,
      "end": 1711096855509,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855509,
      "end": 1711096855509,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855510,
      "end": 1711096855510,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855510,
      "end": 1711096855511,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855511,
      "end": 1711096855511,
      "order": "normal"
    }
  ]
}
