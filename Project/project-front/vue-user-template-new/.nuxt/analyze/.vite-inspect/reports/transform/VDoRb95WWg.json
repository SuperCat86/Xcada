{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/codelens/browser/codelens.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nexport class CodeLensModel {\n    constructor() {\n        this.lenses = [];\n        this._disposables = new DisposableStore();\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n    get isDisposed() {\n        return this._disposables.isDisposed;\n    }\n    add(list, provider) {\n        this._disposables.add(list);\n        for (const symbol of list.lenses) {\n            this.lenses.push({ symbol, provider });\n        }\n    }\n}\nexport function getCodeLensModel(registry, model, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const provider = registry.ordered(model);\n        const providerRanks = new Map();\n        const result = new CodeLensModel();\n        const promises = provider.map((provider, i) => __awaiter(this, void 0, void 0, function* () {\n            providerRanks.set(provider, i);\n            try {\n                const list = yield Promise.resolve(provider.provideCodeLenses(model, token));\n                if (list) {\n                    result.add(list, provider);\n                }\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n            }\n        }));\n        yield Promise.all(promises);\n        result.lenses = result.lenses.sort((a, b) => {\n            // sort by lineNumber, provider-rank, and column\n            if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n                return -1;\n            }\n            else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n                return 1;\n            }\n            else if ((providerRanks.get(a.provider)) < (providerRanks.get(b.provider))) {\n                return -1;\n            }\n            else if ((providerRanks.get(a.provider)) > (providerRanks.get(b.provider))) {\n                return 1;\n            }\n            else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n                return -1;\n            }\n            else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return result;\n    });\n}\nCommandsRegistry.registerCommand('_executeCodeLensProvider', function (accessor, ...args) {\n    let [uri, itemResolveCount] = args;\n    assertType(URI.isUri(uri));\n    assertType(typeof itemResolveCount === 'number' || !itemResolveCount);\n    const { codeLensProvider } = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        throw illegalArgument();\n    }\n    const result = [];\n    const disposables = new DisposableStore();\n    return getCodeLensModel(codeLensProvider, model, CancellationToken.None).then(value => {\n        disposables.add(value);\n        let resolve = [];\n        for (const item of value.lenses) {\n            if (itemResolveCount === undefined || itemResolveCount === null || Boolean(item.symbol.command)) {\n                result.push(item.symbol);\n            }\n            else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) {\n                resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, CancellationToken.None)).then(symbol => result.push(symbol || item.symbol)));\n            }\n        }\n        return Promise.all(resolve);\n    }).then(() => {\n        return result;\n    }).finally(() => {\n        // make sure to return results, then (on next tick)\n        // dispose the results\n        setTimeout(() => disposables.dispose(), 100);\n    });\n});\n",
      "start": 1711096855559,
      "end": 1711096855664,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855664,
      "end": 1711096855664,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855664,
      "end": 1711096855665,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855665,
      "end": 1711096855665,
      "order": "normal"
    }
  ]
}
