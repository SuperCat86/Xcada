{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/commands/trimTrailingWhitespaceCommand.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation } from '../core/editOperation.js';\nimport { Range } from '../core/range.js';\nexport class TrimTrailingWhitespaceCommand {\n    constructor(selection, cursors) {\n        this._selection = selection;\n        this._cursors = cursors;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        const ops = trimTrailingWhitespace(model, this._cursors);\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            builder.addEditOperation(op.range, op.text);\n        }\n        this._selectionId = builder.trackSelection(this._selection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model, cursors) {\n    // Sort cursors ascending\n    cursors.sort((a, b) => {\n        if (a.lineNumber === b.lineNumber) {\n            return a.column - b.column;\n        }\n        return a.lineNumber - b.lineNumber;\n    });\n    // Reduce multiple cursors on the same line and only keep the last one on the line\n    for (let i = cursors.length - 2; i >= 0; i--) {\n        if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n            // Remove cursor at `i`\n            cursors.splice(i, 1);\n        }\n    }\n    const r = [];\n    let rLen = 0;\n    let cursorIndex = 0;\n    const cursorLen = cursors.length;\n    for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        const maxLineColumn = lineContent.length + 1;\n        let minEditColumn = 0;\n        if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n            minEditColumn = cursors[cursorIndex].column;\n            cursorIndex++;\n            if (minEditColumn === maxLineColumn) {\n                // The cursor is at the end of the line => no edits for sure on this line\n                continue;\n            }\n        }\n        if (lineContent.length === 0) {\n            continue;\n        }\n        const lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        let fromColumn = 0;\n        if (lastNonWhitespaceIndex === -1) {\n            // Entire line is whitespace\n            fromColumn = 1;\n        }\n        else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n            // There is trailing whitespace\n            fromColumn = lastNonWhitespaceIndex + 2;\n        }\n        else {\n            // There is no trailing whitespace\n            continue;\n        }\n        fromColumn = Math.max(minEditColumn, fromColumn);\n        r[rLen++] = EditOperation.delete(new Range(lineNumber, fromColumn, lineNumber, maxLineColumn));\n    }\n    return r;\n}\n",
      "start": 1711096855798,
      "end": 1711096855918,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855918,
      "end": 1711096855918,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855918,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855919,
      "end": 1711096855919,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855919,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855920,
      "end": 1711096855920,
      "order": "normal"
    }
  ]
}
