{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/indentRangeProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { computeIndentLevel } from '../../../common/model/utils.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT = 5000;\nexport const ID_INDENT_PROVIDER = 'indent';\nexport class IndentRangeProvider {\n    constructor(editorModel, languageConfigurationService, maxFoldingRegions) {\n        this.editorModel = editorModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.maxFoldingRegions = maxFoldingRegions;\n        this.id = ID_INDENT_PROVIDER;\n    }\n    dispose() { }\n    compute(cancelationToken, notifyTooManyRegions) {\n        let foldingRules = this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules;\n        let offSide = foldingRules && !!foldingRules.offSide;\n        let markers = foldingRules && foldingRules.markers;\n        return Promise.resolve(computeRanges(this.editorModel, offSide, markers, this.maxFoldingRegions, notifyTooManyRegions));\n    }\n}\n// public only for testing\nexport class RangesCollector {\n    constructor(foldingRangesLimit, _notifyTooManyRegions) {\n        this._notifyTooManyRegions = _notifyTooManyRegions;\n        this._startIndexes = [];\n        this._endIndexes = [];\n        this._indentOccurrences = [];\n        this._length = 0;\n        this._foldingRangesLimit = foldingRangesLimit;\n    }\n    insertFirst(startLineNumber, endLineNumber, indent) {\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n            return;\n        }\n        let index = this._length;\n        this._startIndexes[index] = startLineNumber;\n        this._endIndexes[index] = endLineNumber;\n        this._length++;\n        if (indent < 1000) {\n            this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n        }\n    }\n    toIndentRanges(model) {\n        if (this._length <= this._foldingRangesLimit) {\n            // reverse and create arrays of the exact length\n            let startIndexes = new Uint32Array(this._length);\n            let endIndexes = new Uint32Array(this._length);\n            for (let i = this._length - 1, k = 0; i >= 0; i--, k++) {\n                startIndexes[k] = this._startIndexes[i];\n                endIndexes[k] = this._endIndexes[i];\n            }\n            return new FoldingRegions(startIndexes, endIndexes);\n        }\n        else {\n            if (this._notifyTooManyRegions) {\n                this._notifyTooManyRegions(this._foldingRangesLimit);\n            }\n            let entries = 0;\n            let maxIndent = this._indentOccurrences.length;\n            for (let i = 0; i < this._indentOccurrences.length; i++) {\n                let n = this._indentOccurrences[i];\n                if (n) {\n                    if (n + entries > this._foldingRangesLimit) {\n                        maxIndent = i;\n                        break;\n                    }\n                    entries += n;\n                }\n            }\n            const tabSize = model.getOptions().tabSize;\n            // reverse and create arrays of the exact length\n            let startIndexes = new Uint32Array(this._foldingRangesLimit);\n            let endIndexes = new Uint32Array(this._foldingRangesLimit);\n            for (let i = this._length - 1, k = 0; i >= 0; i--) {\n                let startIndex = this._startIndexes[i];\n                let lineContent = model.getLineContent(startIndex);\n                let indent = computeIndentLevel(lineContent, tabSize);\n                if (indent < maxIndent || (indent === maxIndent && entries++ < this._foldingRangesLimit)) {\n                    startIndexes[k] = startIndex;\n                    endIndexes[k] = this._endIndexes[i];\n                    k++;\n                }\n            }\n            return new FoldingRegions(startIndexes, endIndexes);\n        }\n    }\n}\nexport function computeRanges(model, offSide, markers, foldingRangesLimit, notifyTooManyRegions) {\n    const tabSize = model.getOptions().tabSize;\n    foldingRangesLimit = foldingRangesLimit !== null && foldingRangesLimit !== void 0 ? foldingRangesLimit : MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT;\n    let result = new RangesCollector(foldingRangesLimit, notifyTooManyRegions);\n    let pattern = undefined;\n    if (markers) {\n        pattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);\n    }\n    let previousRegions = [];\n    let line = model.getLineCount() + 1;\n    previousRegions.push({ indent: -1, endAbove: line, line }); // sentinel, to make sure there's at least one entry\n    for (let line = model.getLineCount(); line > 0; line--) {\n        let lineContent = model.getLineContent(line);\n        let indent = computeIndentLevel(lineContent, tabSize);\n        let previous = previousRegions[previousRegions.length - 1];\n        if (indent === -1) {\n            if (offSide) {\n                // for offSide languages, empty lines are associated to the previous block\n                // note: the next block is already written to the results, so this only\n                // impacts the end position of the block before\n                previous.endAbove = line;\n            }\n            continue; // only whitespace\n        }\n        let m;\n        if (pattern && (m = lineContent.match(pattern))) {\n            // folding pattern match\n            if (m[1]) { // start pattern match\n                // discard all regions until the folding pattern\n                let i = previousRegions.length - 1;\n                while (i > 0 && previousRegions[i].indent !== -2) {\n                    i--;\n                }\n                if (i > 0) {\n                    previousRegions.length = i + 1;\n                    previous = previousRegions[i];\n                    // new folding range from pattern, includes the end line\n                    result.insertFirst(line, previous.line, indent);\n                    previous.line = line;\n                    previous.indent = indent;\n                    previous.endAbove = line;\n                    continue;\n                }\n                else {\n                    // no end marker found, treat line as a regular line\n                }\n            }\n            else { // end pattern match\n                previousRegions.push({ indent: -2, endAbove: line, line });\n                continue;\n            }\n        }\n        if (previous.indent > indent) {\n            // discard all regions with larger indent\n            do {\n                previousRegions.pop();\n                previous = previousRegions[previousRegions.length - 1];\n            } while (previous.indent > indent);\n            // new folding range\n            let endLineNumber = previous.endAbove - 1;\n            if (endLineNumber - line >= 1) { // needs at east size 1\n                result.insertFirst(line, endLineNumber, indent);\n            }\n        }\n        if (previous.indent === indent) {\n            previous.endAbove = line;\n        }\n        else { // previous.indent < indent\n            // new region with a bigger indent\n            previousRegions.push({ indent, endAbove: line, line });\n        }\n    }\n    return result.toIndentRanges(model);\n}\n",
      "start": 1711096855659,
      "end": 1711096855771,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855772,
      "end": 1711096855772,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855772,
      "end": 1711096855773,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855773,
      "end": 1711096855773,
      "order": "normal"
    }
  ]
}
