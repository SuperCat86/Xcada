{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/core/selection.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* LTR */;\n        }\n        return 1 /* RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n",
      "start": 1711096855092,
      "end": 1711096855232,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855232,
      "end": 1711096855232,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855232,
      "end": 1711096855233,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855233,
      "end": 1711096855233,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855233,
      "end": 1711096855234,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855234,
      "end": 1711096855234,
      "order": "normal"
    }
  ]
}
