{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\nexport function getIconClasses(modelService, languageService, resource, fileKind) {\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            const match = resource.path.match(fileIconDirectoryRegex);\n            if (match) {\n                name = cssEscape(match[2].toLowerCase());\n                if (match[1]) {\n                    classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n                }\n            }\n            else {\n                name = cssEscape(resource.authority.toLowerCase());\n            }\n        }\n        // Folders\n        if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                classes.push(`name-file-icon`); // extra segment to increase file-name score\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nexport function cssEscape(str) {\n    return str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n",
      "start": 1711096857388,
      "end": 1711096857517,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857517,
      "end": 1711096857517,
      "order": "normal"
    }
  ]
}
