{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.readOnly = options.get(81 /* readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(104 /* stickyTabStops */);\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(116 /* useTabStops */);\n        this.wordSeparators = options.get(117 /* wordSeparators */);\n        this.emptySelectionClipboard = options.get(32 /* emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(21 /* copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(69 /* multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(71 /* multiCursorPaste */);\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\n        this.autoClosingQuotes = options.get(8 /* autoClosingQuotes */);\n        this.autoClosingDelete = options.get(6 /* autoClosingDelete */);\n        this.autoClosingOvertype = options.get(7 /* autoClosingOvertype */);\n        this.autoSurround = options.get(11 /* autoSurround */);\n        this.autoIndent = options.get(9 /* autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets)\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    static shouldRecreate(e) {\n        return (e.hasChanged(131 /* layoutInfo */)\n            || e.hasChanged(117 /* wordSeparators */)\n            || e.hasChanged(32 /* emptySelectionClipboard */)\n            || e.hasChanged(69 /* multiCursorMergeOverlapping */)\n            || e.hasChanged(71 /* multiCursorPaste */)\n            || e.hasChanged(5 /* autoClosingBrackets */)\n            || e.hasChanged(8 /* autoClosingQuotes */)\n            || e.hasChanged(6 /* autoClosingDelete */)\n            || e.hasChanged(7 /* autoClosingOvertype */)\n            || e.hasChanged(11 /* autoSurround */)\n            || e.hasChanged(116 /* useTabStops */)\n            || e.hasChanged(59 /* lineHeight */)\n            || e.hasChanged(81 /* readOnly */));\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet();\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this._singleCursorStateBrand = undefined;\n        this.selectionStart = selectionStart;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n",
      "start": 1711096855233,
      "end": 1711096855307,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855307,
      "end": 1711096855307,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855307,
      "end": 1711096855308,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855308,
      "end": 1711096855308,
      "order": "normal"
    }
  ]
}
