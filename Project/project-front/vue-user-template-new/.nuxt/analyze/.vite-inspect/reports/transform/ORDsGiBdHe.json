{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/core/cursorColumns.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n    static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n        if (codePoint === 9 /* Tab */) {\n            return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            return visibleColumn + 2;\n        }\n        return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\n        const textLen = Math.min(column - 1, lineContent.length);\n        const text = lineContent.substring(0, textLen);\n        const iterator = new strings.GraphemeIterator(text);\n        let result = 0;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n            iterator.nextGraphemeLength();\n            result = this._nextVisibleColumn(codePoint, result, tabSize);\n        }\n        return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        const lineContentLength = lineContent.length;\n        const iterator = new strings.GraphemeIterator(lineContent);\n        let beforeVisibleColumn = 0;\n        let beforeColumn = 1;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n            iterator.nextGraphemeLength();\n            const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n            const afterColumn = iterator.offset + 1;\n            if (afterVisibleColumn >= visibleColumn) {\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\n                const afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < beforeDelta) {\n                    return afterColumn;\n                }\n                else {\n                    return beforeColumn;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n            beforeColumn = afterColumn;\n        }\n        // walked the entire string\n        return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextRenderTabStop(visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextIndentTabStop(visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevRenderTabStop(column, tabSize) {\n        return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevIndentTabStop(column, indentSize) {\n        return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n}\n",
      "start": 1711096855290,
      "end": 1711096855377,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855377,
      "end": 1711096855377,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855377,
      "end": 1711096855378,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855378,
      "end": 1711096855378,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855378,
      "end": 1711096855378,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855378,
      "end": 1711096855378,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855378,
      "end": 1711096855378,
      "order": "normal"
    }
  ]
}
