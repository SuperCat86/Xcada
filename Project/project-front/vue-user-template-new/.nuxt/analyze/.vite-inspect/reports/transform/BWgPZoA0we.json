{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CSSIcon } from './codicons.js';\nimport { matchesFuzzy } from './filters.js';\nimport { ltrim } from './strings.js';\nexport const iconStartMarker = '$(';\nconst iconsRegex = new RegExp(`\\\\$\\\\(${CSSIcon.iconNameExpression}(?:${CSSIcon.iconModifierExpression})?\\\\)`, 'g'); // no capturing groups\nconst iconNameCharacterRegexp = new RegExp(CSSIcon.iconNameCharacter);\nconst escapeIconsRegex = new RegExp(`(\\\\\\\\)?${iconsRegex.source}`, 'g');\nexport function escapeIcons(text) {\n    return text.replace(escapeIconsRegex, (match, escaped) => escaped ? match : `\\\\${match}`);\n}\nconst markdownEscapedIconsRegex = new RegExp(`\\\\\\\\${iconsRegex.source}`, 'g');\nexport function markdownEscapeEscapedIcons(text) {\n    // Need to add an extra \\ for escaping in markdown\n    return text.replace(markdownEscapedIconsRegex, match => `\\\\${match}`);\n}\nconst stripIconsRegex = new RegExp(`(\\\\s)?(\\\\\\\\)?${iconsRegex.source}(\\\\s)?`, 'g');\nexport function stripIcons(text) {\n    if (text.indexOf(iconStartMarker) === -1) {\n        return text;\n    }\n    return text.replace(stripIconsRegex, (match, preWhitespace, escaped, postWhitespace) => escaped ? match : preWhitespace || postWhitespace || '');\n}\nexport function parseLabelWithIcons(text) {\n    const firstIconIndex = text.indexOf(iconStartMarker);\n    if (firstIconIndex === -1) {\n        return { text }; // return early if the word does not include an icon\n    }\n    return doParseLabelWithIcons(text, firstIconIndex);\n}\nfunction doParseLabelWithIcons(text, firstIconIndex) {\n    const iconOffsets = [];\n    let textWithoutIcons = '';\n    function appendChars(chars) {\n        if (chars) {\n            textWithoutIcons += chars;\n            for (const _ of chars) {\n                iconOffsets.push(iconsOffset); // make sure to fill in icon offsets\n            }\n        }\n    }\n    let currentIconStart = -1;\n    let currentIconValue = '';\n    let iconsOffset = 0;\n    let char;\n    let nextChar;\n    let offset = firstIconIndex;\n    const length = text.length;\n    // Append all characters until the first icon\n    appendChars(text.substr(0, firstIconIndex));\n    // example: $(file-symlink-file) my cool $(other-icon) entry\n    while (offset < length) {\n        char = text[offset];\n        nextChar = text[offset + 1];\n        // beginning of icon: some value $( <--\n        if (char === iconStartMarker[0] && nextChar === iconStartMarker[1]) {\n            currentIconStart = offset;\n            // if we had a previous potential icon value without\n            // the closing ')', it was actually not an icon and\n            // so we have to add it to the actual value\n            appendChars(currentIconValue);\n            currentIconValue = iconStartMarker;\n            offset++; // jump over '('\n        }\n        // end of icon: some value $(some-icon) <--\n        else if (char === ')' && currentIconStart !== -1) {\n            const currentIconLength = offset - currentIconStart + 1; // +1 to include the closing ')'\n            iconsOffset += currentIconLength;\n            currentIconStart = -1;\n            currentIconValue = '';\n        }\n        // within icon\n        else if (currentIconStart !== -1) {\n            // Make sure this is a real icon name\n            if (iconNameCharacterRegexp.test(char)) {\n                currentIconValue += char;\n            }\n            else {\n                // This is not a real icon, treat it as text\n                appendChars(currentIconValue);\n                currentIconStart = -1;\n                currentIconValue = '';\n            }\n        }\n        // any value outside of icon\n        else {\n            appendChars(char);\n        }\n        offset++;\n    }\n    // if we had a previous potential icon value without\n    // the closing ')', it was actually not an icon and\n    // so we have to add it to the actual value\n    appendChars(currentIconValue);\n    return { text: textWithoutIcons, iconOffsets };\n}\nexport function matchesFuzzyIconAware(query, target, enableSeparateSubstringMatching = false) {\n    const { text, iconOffsets } = target;\n    // Return early if there are no icon markers in the word to match against\n    if (!iconOffsets || iconOffsets.length === 0) {\n        return matchesFuzzy(query, text, enableSeparateSubstringMatching);\n    }\n    // Trim the word to match against because it could have leading\n    // whitespace now if the word started with an icon\n    const wordToMatchAgainstWithoutIconsTrimmed = ltrim(text, ' ');\n    const leadingWhitespaceOffset = text.length - wordToMatchAgainstWithoutIconsTrimmed.length;\n    // match on value without icon\n    const matches = matchesFuzzy(query, wordToMatchAgainstWithoutIconsTrimmed, enableSeparateSubstringMatching);\n    // Map matches back to offsets with icon and trimming\n    if (matches) {\n        for (const match of matches) {\n            const iconOffset = iconOffsets[match.start + leadingWhitespaceOffset] /* icon offsets at index */ + leadingWhitespaceOffset /* overall leading whitespace offset */;\n            match.start += iconOffset;\n            match.end += iconOffset;\n        }\n    }\n    return matches;\n}\n",
      "start": 1711096856126,
      "end": 1711096856211,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856211,
      "end": 1711096856211,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856211,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856212,
      "end": 1711096856212,
      "order": "normal"
    }
  ]
}
