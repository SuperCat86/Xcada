{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(65 /* minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(92 /* scrollbar */)\n            || e.hasChanged(67 /* mouseWheelScrollSensitivity */)\n            || e.hasChanged(34 /* fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(92 /* scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    // Scrollbars\n    const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n    if (scrollbarShadowColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n});\n",
      "start": 1711096856368,
      "end": 1711096856444,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856444,
      "end": 1711096856444,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856444,
      "end": 1711096856445,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856445,
      "end": 1711096856445,
      "order": "normal"
    }
  ]
}
