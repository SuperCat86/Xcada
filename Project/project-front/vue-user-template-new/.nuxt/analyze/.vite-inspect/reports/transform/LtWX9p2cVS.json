{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensDto.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport * as platform from '../../../base/common/platform.js';\nfunction reverseEndianness(arr) {\n    for (let i = 0, len = arr.length; i < len; i += 4) {\n        // flip bytes 0<->3 and 1<->2\n        const b0 = arr[i + 0];\n        const b1 = arr[i + 1];\n        const b2 = arr[i + 2];\n        const b3 = arr[i + 3];\n        arr[i + 0] = b3;\n        arr[i + 1] = b2;\n        arr[i + 2] = b1;\n        arr[i + 3] = b0;\n    }\n}\nfunction toLittleEndianBuffer(arr) {\n    const uint8Arr = new Uint8Array(arr.buffer, arr.byteOffset, arr.length * 4);\n    if (!platform.isLittleEndian()) {\n        // the byte order must be changed\n        reverseEndianness(uint8Arr);\n    }\n    return VSBuffer.wrap(uint8Arr);\n}\nexport function encodeSemanticTokensDto(semanticTokens) {\n    const dest = new Uint32Array(encodeSemanticTokensDtoSize(semanticTokens));\n    let offset = 0;\n    dest[offset++] = semanticTokens.id;\n    if (semanticTokens.type === 'full') {\n        dest[offset++] = 1 /* Full */;\n        dest[offset++] = semanticTokens.data.length;\n        dest.set(semanticTokens.data, offset);\n        offset += semanticTokens.data.length;\n    }\n    else {\n        dest[offset++] = 2 /* Delta */;\n        dest[offset++] = semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            dest[offset++] = delta.start;\n            dest[offset++] = delta.deleteCount;\n            if (delta.data) {\n                dest[offset++] = delta.data.length;\n                dest.set(delta.data, offset);\n                offset += delta.data.length;\n            }\n            else {\n                dest[offset++] = 0;\n            }\n        }\n    }\n    return toLittleEndianBuffer(dest);\n}\nfunction encodeSemanticTokensDtoSize(semanticTokens) {\n    let result = 0;\n    result += (+1 // id\n        + 1 // type\n    );\n    if (semanticTokens.type === 'full') {\n        result += (+1 // data length\n            + semanticTokens.data.length);\n    }\n    else {\n        result += (+1 // delta count\n        );\n        result += (+1 // start\n            + 1 // deleteCount\n            + 1 // data length\n        ) * semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            if (delta.data) {\n                result += delta.data.length;\n            }\n        }\n    }\n    return result;\n}\n",
      "start": 1711096856891,
      "end": 1711096857059,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857059,
      "end": 1711096857059,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857059,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857060,
      "end": 1711096857060,
      "order": "normal"
    }
  ]
}
