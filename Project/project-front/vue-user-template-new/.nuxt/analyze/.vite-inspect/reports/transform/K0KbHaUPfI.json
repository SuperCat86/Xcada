{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/services/getSemanticTokens.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IModelService } from './model.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { encodeSemanticTokensDto } from './semanticTokensDto.js';\nimport { Range } from '../core/range.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nexport function isSemanticTokens(v) {\n    return v && !!(v.data);\n}\nexport function isSemanticTokensEdits(v) {\n    return v && Array.isArray(v.edits);\n}\nexport class DocumentSemanticTokensResult {\n    constructor(provider, tokens, error) {\n        this.provider = provider;\n        this.tokens = tokens;\n        this.error = error;\n    }\n}\nexport function hasDocumentSemanticTokensProvider(registry, model) {\n    return registry.has(model);\n}\nfunction getDocumentSemanticTokensProviders(registry, model) {\n    const groups = registry.orderedGroups(model);\n    return (groups.length > 0 ? groups[0] : []);\n}\nexport function getDocumentSemanticTokens(registry, model, lastProvider, lastResultId, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getDocumentSemanticTokensProviders(registry, model);\n        // Get tokens from all providers at the same time.\n        const results = yield Promise.all(providers.map((provider) => __awaiter(this, void 0, void 0, function* () {\n            let result;\n            let error = null;\n            try {\n                result = yield provider.provideDocumentSemanticTokens(model, (provider === lastProvider ? lastResultId : null), token);\n            }\n            catch (err) {\n                error = err;\n                result = null;\n            }\n            if (!result || (!isSemanticTokens(result) && !isSemanticTokensEdits(result))) {\n                result = null;\n            }\n            return new DocumentSemanticTokensResult(provider, result, error);\n        })));\n        // Try to return the first result with actual tokens or\n        // the first result which threw an error (!!)\n        for (const result of results) {\n            if (result.error) {\n                throw result.error;\n            }\n            if (result.tokens) {\n                return result;\n            }\n        }\n        // Return the first result, even if it doesn't have tokens\n        if (results.length > 0) {\n            return results[0];\n        }\n        return null;\n    });\n}\nfunction _getDocumentSemanticTokensProviderHighestGroup(registry, model) {\n    const result = registry.orderedGroups(model);\n    return (result.length > 0 ? result[0] : null);\n}\nclass DocumentRangeSemanticTokensResult {\n    constructor(provider, tokens) {\n        this.provider = provider;\n        this.tokens = tokens;\n    }\n}\nexport function hasDocumentRangeSemanticTokensProvider(providers, model) {\n    return providers.has(model);\n}\nfunction getDocumentRangeSemanticTokensProviders(providers, model) {\n    const groups = providers.orderedGroups(model);\n    return (groups.length > 0 ? groups[0] : []);\n}\nexport function getDocumentRangeSemanticTokens(registry, model, range, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getDocumentRangeSemanticTokensProviders(registry, model);\n        // Get tokens from all providers at the same time.\n        const results = yield Promise.all(providers.map((provider) => __awaiter(this, void 0, void 0, function* () {\n            let result;\n            try {\n                result = yield provider.provideDocumentRangeSemanticTokens(model, range, token);\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n                result = null;\n            }\n            if (!result || !isSemanticTokens(result)) {\n                result = null;\n            }\n            return new DocumentRangeSemanticTokensResult(provider, result);\n        })));\n        // Try to return the first result with actual tokens\n        for (const result of results) {\n            if (result.tokens) {\n                return result;\n            }\n        }\n        // Return the first result, even if it doesn't have tokens\n        if (results.length > 0) {\n            return results[0];\n        }\n        return null;\n    });\n}\nCommandsRegistry.registerCommand('_provideDocumentSemanticTokensLegend', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const providers = _getDocumentSemanticTokensProviderHighestGroup(documentSemanticTokensProvider, model);\n    if (!providers) {\n        // there is no provider => fall back to a document range semantic tokens provider\n        return accessor.get(ICommandService).executeCommand('_provideDocumentRangeSemanticTokensLegend', uri);\n    }\n    return providers[0].getLegend();\n}));\nCommandsRegistry.registerCommand('_provideDocumentSemanticTokens', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    if (!hasDocumentSemanticTokensProvider(documentSemanticTokensProvider, model)) {\n        // there is no provider => fall back to a document range semantic tokens provider\n        return accessor.get(ICommandService).executeCommand('_provideDocumentRangeSemanticTokens', uri, model.getFullModelRange());\n    }\n    const r = yield getDocumentSemanticTokens(documentSemanticTokensProvider, model, null, null, CancellationToken.None);\n    if (!r) {\n        return undefined;\n    }\n    const { provider, tokens } = r;\n    if (!tokens || !isSemanticTokens(tokens)) {\n        return undefined;\n    }\n    const buff = encodeSemanticTokensDto({\n        id: 0,\n        type: 'full',\n        data: tokens.data\n    });\n    if (tokens.resultId) {\n        provider.releaseDocumentSemanticTokens(tokens.resultId);\n    }\n    return buff;\n}));\nCommandsRegistry.registerCommand('_provideDocumentRangeSemanticTokensLegend', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(uri instanceof URI);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentRangeSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const providers = getDocumentRangeSemanticTokensProviders(documentRangeSemanticTokensProvider, model);\n    if (providers.length === 0) {\n        // no providers\n        return undefined;\n    }\n    if (providers.length === 1) {\n        // straight forward case, just a single provider\n        return providers[0].getLegend();\n    }\n    if (!range || !Range.isIRange(range)) {\n        // if no range is provided, we cannot support multiple providers\n        // as we cannot fall back to the one which would give results\n        // => return the first legend for backwards compatibility and print a warning\n        console.warn(`provideDocumentRangeSemanticTokensLegend might be out-of-sync with provideDocumentRangeSemanticTokens unless a range argument is passed in`);\n        return providers[0].getLegend();\n    }\n    const result = yield getDocumentRangeSemanticTokens(documentRangeSemanticTokensProvider, model, Range.lift(range), CancellationToken.None);\n    if (!result) {\n        return undefined;\n    }\n    return result.provider.getLegend();\n}));\nCommandsRegistry.registerCommand('_provideDocumentRangeSemanticTokens', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(uri instanceof URI);\n    assertType(Range.isIRange(range));\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return undefined;\n    }\n    const { documentRangeSemanticTokensProvider } = accessor.get(ILanguageFeaturesService);\n    const result = yield getDocumentRangeSemanticTokens(documentRangeSemanticTokensProvider, model, Range.lift(range), CancellationToken.None);\n    if (!result || !result.tokens) {\n        // there is no provider or it didn't return tokens\n        return undefined;\n    }\n    return encodeSemanticTokensDto({\n        id: 0,\n        type: 'full',\n        data: result.tokens.data\n    });\n}));\n",
      "start": 1711096856007,
      "end": 1711096856110,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856110,
      "end": 1711096856110,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856110,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856111,
      "end": 1711096856111,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856111,
      "end": 1711096856112,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856112,
      "end": 1711096856112,
      "order": "normal"
    }
  ]
}
