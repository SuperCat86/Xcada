{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/common/actions.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from './event.js';\nimport { Disposable } from './lifecycle.js';\nimport * as nls from '../../nls.js';\nexport class Action extends Disposable {\n    constructor(id, label = '', cssClass = '', enabled = true, actionCallback) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._enabled = true;\n        this._id = id;\n        this._label = label;\n        this._cssClass = cssClass;\n        this._enabled = enabled;\n        this._actionCallback = actionCallback;\n    }\n    get id() {\n        return this._id;\n    }\n    get label() {\n        return this._label;\n    }\n    set label(value) {\n        this._setLabel(value);\n    }\n    _setLabel(value) {\n        if (this._label !== value) {\n            this._label = value;\n            this._onDidChange.fire({ label: value });\n        }\n    }\n    get tooltip() {\n        return this._tooltip || '';\n    }\n    set tooltip(value) {\n        this._setTooltip(value);\n    }\n    _setTooltip(value) {\n        if (this._tooltip !== value) {\n            this._tooltip = value;\n            this._onDidChange.fire({ tooltip: value });\n        }\n    }\n    get class() {\n        return this._cssClass;\n    }\n    set class(value) {\n        this._setClass(value);\n    }\n    _setClass(value) {\n        if (this._cssClass !== value) {\n            this._cssClass = value;\n            this._onDidChange.fire({ class: value });\n        }\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._setEnabled(value);\n    }\n    _setEnabled(value) {\n        if (this._enabled !== value) {\n            this._enabled = value;\n            this._onDidChange.fire({ enabled: value });\n        }\n    }\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._setChecked(value);\n    }\n    _setChecked(value) {\n        if (this._checked !== value) {\n            this._checked = value;\n            this._onDidChange.fire({ checked: value });\n        }\n    }\n    run(event, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._actionCallback) {\n                yield this._actionCallback(event);\n            }\n        });\n    }\n}\nexport class ActionRunner extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._onBeforeRun = this._register(new Emitter());\n        this.onBeforeRun = this._onBeforeRun.event;\n        this._onDidRun = this._register(new Emitter());\n        this.onDidRun = this._onDidRun.event;\n    }\n    run(action, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!action.enabled) {\n                return;\n            }\n            this._onBeforeRun.fire({ action });\n            let error = undefined;\n            try {\n                yield this.runAction(action, context);\n            }\n            catch (e) {\n                error = e;\n            }\n            this._onDidRun.fire({ action, error });\n        });\n    }\n    runAction(action, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield action.run(context);\n        });\n    }\n}\nexport class Separator extends Action {\n    constructor(label) {\n        super(Separator.ID, label, label ? 'separator text' : 'separator');\n        this.checked = false;\n        this.enabled = false;\n    }\n}\nSeparator.ID = 'vs.actions.separator';\nexport class SubmenuAction {\n    constructor(id, label, actions, cssClass) {\n        this.tooltip = '';\n        this.enabled = true;\n        this.checked = undefined;\n        this.id = id;\n        this.label = label;\n        this.class = cssClass;\n        this._actions = actions;\n    }\n    get actions() { return this._actions; }\n    dispose() {\n        // there is NOTHING to dispose and the SubmenuAction should\n        // never have anything to dispose as it is a convenience type\n        // to bridge into the rendering world.\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () { });\n    }\n}\nexport class EmptySubmenuAction extends Action {\n    constructor() {\n        super(EmptySubmenuAction.ID, nls.localize('submenu.empty', '(empty)'), undefined, false);\n    }\n}\nEmptySubmenuAction.ID = 'vs.actions.empty';\n",
      "start": 1711096855578,
      "end": 1711096855677,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855677,
      "end": 1711096855677,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855677,
      "end": 1711096855678,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855678,
      "end": 1711096855678,
      "order": "normal"
    }
  ]
}
