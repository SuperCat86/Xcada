{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/browser/parameterHintsModel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createCancelablePromise, Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport * as languages from '../../../common/languages.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n(function (ParameterHintState) {\n    ParameterHintState.Default = { type: 0 /* Default */ };\n    class Pending {\n        constructor(request, previouslyActiveHints) {\n            this.request = request;\n            this.previouslyActiveHints = previouslyActiveHints;\n            this.type = 2 /* Pending */;\n        }\n    }\n    ParameterHintState.Pending = Pending;\n    class Active {\n        constructor(hints) {\n            this.hints = hints;\n            this.type = 1 /* Active */;\n        }\n    }\n    ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\nexport class ParameterHintsModel extends Disposable {\n    constructor(editor, providers, delay = ParameterHintsModel.DEFAULT_DELAY) {\n        super();\n        this._onChangedHints = this._register(new Emitter());\n        this.onChangedHints = this._onChangedHints.event;\n        this.triggerOnType = false;\n        this._state = ParameterHintState.Default;\n        this._pendingTriggers = [];\n        this._lastSignatureHelpResult = this._register(new MutableDisposable());\n        this.triggerChars = new CharacterSet();\n        this.retriggerChars = new CharacterSet();\n        this.triggerId = 0;\n        this.editor = editor;\n        this.providers = providers;\n        this.throttledDelayer = new Delayer(delay);\n        this._register(this.editor.onDidBlurEditorWidget(() => this.cancel()));\n        this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange()));\n        this._register(this.editor.onDidChangeModel(e => this.onModelChanged()));\n        this._register(this.editor.onDidChangeModelLanguage(_ => this.onModelChanged()));\n        this._register(this.editor.onDidChangeCursorSelection(e => this.onCursorChange(e)));\n        this._register(this.editor.onDidChangeModelContent(e => this.onModelContentChange()));\n        this._register(this.providers.onDidChange(this.onModelChanged, this));\n        this._register(this.editor.onDidType(text => this.onDidType(text)));\n        this.onEditorConfigurationChange();\n        this.onModelChanged();\n    }\n    get state() { return this._state; }\n    set state(value) {\n        if (this._state.type === 2 /* Pending */) {\n            this._state.request.cancel();\n        }\n        this._state = value;\n    }\n    cancel(silent = false) {\n        this.state = ParameterHintState.Default;\n        this.throttledDelayer.cancel();\n        if (!silent) {\n            this._onChangedHints.fire(undefined);\n        }\n    }\n    trigger(context, delay) {\n        const model = this.editor.getModel();\n        if (!model || !this.providers.has(model)) {\n            return;\n        }\n        const triggerId = ++this.triggerId;\n        this._pendingTriggers.push(context);\n        this.throttledDelayer.trigger(() => {\n            return this.doTrigger(triggerId);\n        }, delay)\n            .catch(onUnexpectedError);\n    }\n    next() {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const last = (activeSignature % length) === (length - 1);\n        const cycle = this.editor.getOption(76 /* parameterHints */).cycle;\n        // If there is only one signature, or we're on last signature of list\n        if ((length < 2 || last) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n    }\n    previous() {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const first = activeSignature === 0;\n        const cycle = this.editor.getOption(76 /* parameterHints */).cycle;\n        // If there is only one signature, or we're on first signature of list\n        if ((length < 2 || first) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n    }\n    updateActiveSignature(activeSignature) {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        this.state = new ParameterHintState.Active(Object.assign(Object.assign({}, this.state.hints), { activeSignature }));\n        this._onChangedHints.fire(this.state.hints);\n    }\n    doTrigger(triggerId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isRetrigger = this.state.type === 1 /* Active */ || this.state.type === 2 /* Pending */;\n            const activeSignatureHelp = this.getLastActiveHints();\n            this.cancel(true);\n            if (this._pendingTriggers.length === 0) {\n                return false;\n            }\n            const context = this._pendingTriggers.reduce(mergeTriggerContexts);\n            this._pendingTriggers = [];\n            const triggerContext = {\n                triggerKind: context.triggerKind,\n                triggerCharacter: context.triggerCharacter,\n                isRetrigger: isRetrigger,\n                activeSignatureHelp: activeSignatureHelp\n            };\n            if (!this.editor.hasModel()) {\n                return false;\n            }\n            const model = this.editor.getModel();\n            const position = this.editor.getPosition();\n            this.state = new ParameterHintState.Pending(createCancelablePromise(token => provideSignatureHelp(this.providers, model, position, triggerContext, token)), activeSignatureHelp);\n            try {\n                const result = yield this.state.request;\n                // Check that we are still resolving the correct signature help\n                if (triggerId !== this.triggerId) {\n                    result === null || result === void 0 ? void 0 : result.dispose();\n                    return false;\n                }\n                if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n                    result === null || result === void 0 ? void 0 : result.dispose();\n                    this._lastSignatureHelpResult.clear();\n                    this.cancel();\n                    return false;\n                }\n                else {\n                    this.state = new ParameterHintState.Active(result.value);\n                    this._lastSignatureHelpResult.value = result;\n                    this._onChangedHints.fire(this.state.hints);\n                    return true;\n                }\n            }\n            catch (error) {\n                if (triggerId === this.triggerId) {\n                    this.state = ParameterHintState.Default;\n                }\n                onUnexpectedError(error);\n                return false;\n            }\n        });\n    }\n    getLastActiveHints() {\n        switch (this.state.type) {\n            case 1 /* Active */: return this.state.hints;\n            case 2 /* Pending */: return this.state.previouslyActiveHints;\n            default: return undefined;\n        }\n    }\n    get isTriggered() {\n        return this.state.type === 1 /* Active */\n            || this.state.type === 2 /* Pending */\n            || this.throttledDelayer.isTriggered();\n    }\n    onModelChanged() {\n        this.cancel();\n        // Update trigger characters\n        this.triggerChars = new CharacterSet();\n        this.retriggerChars = new CharacterSet();\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        for (const support of this.providers.ordered(model)) {\n            for (const ch of support.signatureHelpTriggerCharacters || []) {\n                this.triggerChars.add(ch.charCodeAt(0));\n                // All trigger characters are also considered retrigger characters\n                this.retriggerChars.add(ch.charCodeAt(0));\n            }\n            for (const ch of support.signatureHelpRetriggerCharacters || []) {\n                this.retriggerChars.add(ch.charCodeAt(0));\n            }\n        }\n    }\n    onDidType(text) {\n        if (!this.triggerOnType) {\n            return;\n        }\n        const lastCharIndex = text.length - 1;\n        const triggerCharCode = text.charCodeAt(lastCharIndex);\n        if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n            this.trigger({\n                triggerKind: languages.SignatureHelpTriggerKind.TriggerCharacter,\n                triggerCharacter: text.charAt(lastCharIndex),\n            });\n        }\n    }\n    onCursorChange(e) {\n        if (e.source === 'mouse') {\n            this.cancel();\n        }\n        else if (this.isTriggered) {\n            this.trigger({ triggerKind: languages.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onModelContentChange() {\n        if (this.isTriggered) {\n            this.trigger({ triggerKind: languages.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onEditorConfigurationChange() {\n        this.triggerOnType = this.editor.getOption(76 /* parameterHints */).enabled;\n        if (!this.triggerOnType) {\n            this.cancel();\n        }\n    }\n    dispose() {\n        this.cancel(true);\n        super.dispose();\n    }\n}\nParameterHintsModel.DEFAULT_DELAY = 120; // ms\nfunction mergeTriggerContexts(previous, current) {\n    switch (current.triggerKind) {\n        case languages.SignatureHelpTriggerKind.Invoke:\n            // Invoke overrides previous triggers.\n            return current;\n        case languages.SignatureHelpTriggerKind.ContentChange:\n            // Ignore content changes triggers\n            return previous;\n        case languages.SignatureHelpTriggerKind.TriggerCharacter:\n        default:\n            return current;\n    }\n}\n",
      "start": 1711096856803,
      "end": 1711096856899,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856899,
      "end": 1711096856899,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856899,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856900,
      "end": 1711096856900,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856900,
      "end": 1711096856904,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856904,
      "end": 1711096856904,
      "order": "normal"
    }
  ]
}
