{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });\nfunction getWorker(label) {\n    // Option for hosts to overwrite the worker script (used in the standalone editor)\n    if (globals.MonacoEnvironment) {\n        if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n            return globals.MonacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = globals.MonacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\t// check if the JS lives on a different origin\n    // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n    // \t}\n    // ESM-comment-end\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, self.origin.length) !== self.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};const ttPolicy = self.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');/*${label}*/`;\n// \t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\treturn URL.createObjectURL(blob);\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker {\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n        this.id = id;\n        const workerOrPromise = getWorker(label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(moduleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        if (this.worker) {\n            this.worker.then(w => w.postMessage(message, transfer));\n        }\n    }\n    dispose() {\n        if (this.worker) {\n            this.worker.then(w => w.terminate());\n        }\n        this.worker = null;\n    }\n}\nexport class DefaultWorkerFactory {\n    constructor(label) {\n        this._label = label;\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(moduleId, onMessageCallback, onErrorCallback) {\n        let workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;\n",
      "start": 1711096856964,
      "end": 1711096857111,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857111,
      "end": 1711096857111,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857111,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857112,
      "end": 1711096857112,
      "order": "normal"
    }
  ]
}
