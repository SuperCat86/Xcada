{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n    return (Array.isArray(what));\n}\nexport function isFuzzyAction(what) {\n    return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n    return (typeof what === 'string');\n}\nexport function isIAction(what) {\n    return !isString(what);\n}\n// Small helper functions\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s) {\n    return (s ? false : true);\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer, str) {\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s) {\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\n * Logs a message.\n */\nexport function log(lexer, msg) {\n    console.log(`${lexer.languageId}: ${msg}`);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n    return new Error(`${lexer.languageId}: ${msg}`);\n}\n// Helper functions for rule finding and substitution\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n    const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n    let stateMatches = null;\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n        if (!empty(dollar)) {\n            return '$'; // $$\n        }\n        if (!empty(hash)) {\n            return fixCase(lexer, id); // default $#\n        }\n        if (!empty(n) && n < matches.length) {\n            return fixCase(lexer, matches[n]); // $n\n        }\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n            return lexer[attr]; //@attribute\n        }\n        if (stateMatches === null) { // split state on demand\n            stateMatches = state.split('.');\n            stateMatches.unshift(state);\n        }\n        if (!empty(s) && s < stateMatches.length) {\n            return fixCase(lexer, stateMatches[s]); //$Sn\n        }\n        return '';\n    });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const rules = lexer.tokenizer[state];\n        if (rules) {\n            return rules;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const exist = lexer.stateNames[state];\n        if (exist) {\n            return true;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return false;\n}\n",
      "start": 1711096856304,
      "end": 1711096856382,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856382,
      "end": 1711096856382,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856383,
      "end": 1711096856383,
      "order": "normal"
    }
  ]
}
