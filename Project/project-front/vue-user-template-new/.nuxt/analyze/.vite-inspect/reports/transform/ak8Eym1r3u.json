{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport './inspectTokens.css';\nimport { $, append, reset } from '../../../../base/browser/dom.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { TokenMetadata, TokenizationRegistry } from '../../../common/languages.js';\nimport { NullState, nullTokenize, nullTokenizeEncoded } from '../../../common/languages/nullTokenize.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { IStandaloneThemeService } from '../../common/standaloneTheme.js';\nimport { editorHoverBackground, editorHoverBorder, editorHoverForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { InspectTokensNLS } from '../../../common/standaloneStrings.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nlet InspectTokensController = class InspectTokensController extends Disposable {\n    constructor(editor, standaloneColorService, languageService) {\n        super();\n        this._editor = editor;\n        this._languageService = languageService;\n        this._widget = null;\n        this._register(this._editor.onDidChangeModel((e) => this.stop()));\n        this._register(this._editor.onDidChangeModelLanguage((e) => this.stop()));\n        this._register(TokenizationRegistry.onDidChange((e) => this.stop()));\n        this._register(this._editor.onKeyUp((e) => e.keyCode === 9 /* Escape */ && this.stop()));\n    }\n    static get(editor) {\n        return editor.getContribution(InspectTokensController.ID);\n    }\n    dispose() {\n        this.stop();\n        super.dispose();\n    }\n    launch() {\n        if (this._widget) {\n            return;\n        }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        this._widget = new InspectTokensWidget(this._editor, this._languageService);\n    }\n    stop() {\n        if (this._widget) {\n            this._widget.dispose();\n            this._widget = null;\n        }\n    }\n};\nInspectTokensController.ID = 'editor.contrib.inspectTokens';\nInspectTokensController = __decorate([\n    __param(1, IStandaloneThemeService),\n    __param(2, ILanguageService)\n], InspectTokensController);\nclass InspectTokens extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inspectTokens',\n            label: InspectTokensNLS.inspectTokensAction,\n            alias: 'Developer: Inspect Tokens',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        const controller = InspectTokensController.get(editor);\n        if (controller) {\n            controller.launch();\n        }\n    }\n}\nfunction renderTokenText(tokenText) {\n    let result = '';\n    for (let charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {\n        const charCode = tokenText.charCodeAt(charIndex);\n        switch (charCode) {\n            case 9 /* Tab */:\n                result += '\\u2192'; // &rarr;\n                break;\n            case 32 /* Space */:\n                result += '\\u00B7'; // &middot;\n                break;\n            default:\n                result += String.fromCharCode(charCode);\n        }\n    }\n    return result;\n}\nfunction getSafeTokenizationSupport(languageIdCodec, languageId) {\n    const tokenizationSupport = TokenizationRegistry.get(languageId);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    const encodedLanguageId = languageIdCodec.encodeLanguageId(languageId);\n    return {\n        getInitialState: () => NullState,\n        tokenize: (line, hasEOL, state) => nullTokenize(languageId, state),\n        tokenizeEncoded: (line, hasEOL, state) => nullTokenizeEncoded(encodedLanguageId, state)\n    };\n}\nclass InspectTokensWidget extends Disposable {\n    constructor(editor, languageService) {\n        super();\n        // Editor.IContentWidget.allowEditorOverflow\n        this.allowEditorOverflow = true;\n        this._editor = editor;\n        this._languageService = languageService;\n        this._model = this._editor.getModel();\n        this._domNode = document.createElement('div');\n        this._domNode.className = 'tokens-inspect-widget';\n        this._tokenizationSupport = getSafeTokenizationSupport(this._languageService.languageIdCodec, this._model.getLanguageId());\n        this._compute(this._editor.getPosition());\n        this._register(this._editor.onDidChangeCursorPosition((e) => this._compute(this._editor.getPosition())));\n        this._editor.addContentWidget(this);\n    }\n    dispose() {\n        this._editor.removeContentWidget(this);\n        super.dispose();\n    }\n    getId() {\n        return InspectTokensWidget._ID;\n    }\n    _compute(position) {\n        const data = this._getTokensAtLine(position.lineNumber);\n        let token1Index = 0;\n        for (let i = data.tokens1.length - 1; i >= 0; i--) {\n            const t = data.tokens1[i];\n            if (position.column - 1 >= t.offset) {\n                token1Index = i;\n                break;\n            }\n        }\n        let token2Index = 0;\n        for (let i = (data.tokens2.length >>> 1); i >= 0; i--) {\n            if (position.column - 1 >= data.tokens2[(i << 1)]) {\n                token2Index = i;\n                break;\n            }\n        }\n        const lineContent = this._model.getLineContent(position.lineNumber);\n        let tokenText = '';\n        if (token1Index < data.tokens1.length) {\n            const tokenStartIndex = data.tokens1[token1Index].offset;\n            const tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;\n            tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);\n        }\n        reset(this._domNode, $('h2.tm-token', undefined, renderTokenText(tokenText), $('span.tm-token-length', undefined, `${tokenText.length} ${tokenText.length === 1 ? 'char' : 'chars'}`)));\n        append(this._domNode, $('hr.tokens-inspect-separator', { 'style': 'clear:both' }));\n        const metadata = (token2Index << 1) + 1 < data.tokens2.length ? this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]) : null;\n        append(this._domNode, $('table.tm-metadata-table', undefined, $('tbody', undefined, $('tr', undefined, $('td.tm-metadata-key', undefined, 'language'), $('td.tm-metadata-value', undefined, `${metadata ? metadata.languageId : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'token type'), $('td.tm-metadata-value', undefined, `${metadata ? this._tokenTypeToString(metadata.tokenType) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'font style'), $('td.tm-metadata-value', undefined, `${metadata ? this._fontStyleToString(metadata.fontStyle) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'foreground'), $('td.tm-metadata-value', undefined, `${metadata ? Color.Format.CSS.formatHex(metadata.foreground) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'background'), $('td.tm-metadata-value', undefined, `${metadata ? Color.Format.CSS.formatHex(metadata.background) : '-?-'}`)))));\n        append(this._domNode, $('hr.tokens-inspect-separator'));\n        if (token1Index < data.tokens1.length) {\n            append(this._domNode, $('span.tm-token-type', undefined, data.tokens1[token1Index].type));\n        }\n        this._editor.layoutContentWidget(this);\n    }\n    _decodeMetadata(metadata) {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        const tokenType = TokenMetadata.getTokenType(metadata);\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\n        const foreground = TokenMetadata.getForeground(metadata);\n        const background = TokenMetadata.getBackground(metadata);\n        return {\n            languageId: this._languageService.languageIdCodec.decodeLanguageId(languageId),\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: colorMap[foreground],\n            background: colorMap[background]\n        };\n    }\n    _tokenTypeToString(tokenType) {\n        switch (tokenType) {\n            case 0 /* Other */: return 'Other';\n            case 1 /* Comment */: return 'Comment';\n            case 2 /* String */: return 'String';\n            case 3 /* RegEx */: return 'RegEx';\n            default: return '??';\n        }\n    }\n    _fontStyleToString(fontStyle) {\n        let r = '';\n        if (fontStyle & 1 /* Italic */) {\n            r += 'italic ';\n        }\n        if (fontStyle & 2 /* Bold */) {\n            r += 'bold ';\n        }\n        if (fontStyle & 4 /* Underline */) {\n            r += 'underline ';\n        }\n        if (fontStyle & 8 /* Strikethrough */) {\n            r += 'strikethrough ';\n        }\n        if (r.length === 0) {\n            r = '---';\n        }\n        return r;\n    }\n    _getTokensAtLine(lineNumber) {\n        const stateBeforeLine = this._getStateBeforeLine(lineNumber);\n        const tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), true, stateBeforeLine);\n        const tokenizationResult2 = this._tokenizationSupport.tokenizeEncoded(this._model.getLineContent(lineNumber), true, stateBeforeLine);\n        return {\n            startState: stateBeforeLine,\n            tokens1: tokenizationResult1.tokens,\n            tokens2: tokenizationResult2.tokens,\n            endState: tokenizationResult1.endState\n        };\n    }\n    _getStateBeforeLine(lineNumber) {\n        let state = this._tokenizationSupport.getInitialState();\n        for (let i = 1; i < lineNumber; i++) {\n            const tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), true, state);\n            state = tokenizationResult.endState;\n        }\n        return state;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return {\n            position: this._editor.getPosition(),\n            preference: [2 /* BELOW */, 1 /* ABOVE */]\n        };\n    }\n}\nInspectTokensWidget._ID = 'editor.contrib.inspectTokensWidget';\nregisterEditorContribution(InspectTokensController.ID, InspectTokensController);\nregisterEditorAction(InspectTokens);\nregisterThemingParticipant((theme, collector) => {\n    const border = theme.getColor(editorHoverBorder);\n    if (border) {\n        const borderWidth = theme.type === ColorScheme.HIGH_CONTRAST ? 2 : 1;\n        collector.addRule(`.monaco-editor .tokens-inspect-widget { border: ${borderWidth}px solid ${border}; }`);\n        collector.addRule(`.monaco-editor .tokens-inspect-widget .tokens-inspect-separator { background-color: ${border}; }`);\n    }\n    const background = theme.getColor(editorHoverBackground);\n    if (background) {\n        collector.addRule(`.monaco-editor .tokens-inspect-widget { background-color: ${background}; }`);\n    }\n    const foreground = theme.getColor(editorHoverForeground);\n    if (foreground) {\n        collector.addRule(`.monaco-editor .tokens-inspect-widget { color: ${foreground}; }`);\n    }\n});\n",
      "start": 1711096853949,
      "end": 1711096854032,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096854032,
      "end": 1711096854032,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096854032,
      "end": 1711096854033,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096854033,
      "end": 1711096854033,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096854033,
      "end": 1711096854033,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096854033,
      "end": 1711096854033,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096854033,
      "end": 1711096854033,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096854033,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096854034,
      "end": 1711096854034,
      "order": "normal"
    }
  ]
}
