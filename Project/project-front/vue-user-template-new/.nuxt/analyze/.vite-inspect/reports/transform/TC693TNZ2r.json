{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHintsHover.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { AsyncIterableObject } from '../../../../base/common/async.js';\nimport { isEmptyMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { HoverForeignElementAnchor } from '../../hover/browser/hoverTypes.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { getHover } from '../../hover/browser/getHover.js';\nimport { MarkdownHover, MarkdownHoverParticipant } from '../../hover/browser/markdownHoverParticipant.js';\nimport { RenderedInlayHintLabelPart, InlayHintsController } from './inlayHintsController.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { localize } from '../../../../nls.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { asCommandLink } from './inlayHints.js';\nclass InlayHintsHoverAnchor extends HoverForeignElementAnchor {\n    constructor(part, owner) {\n        super(10, owner, part.item.anchor.range);\n        this.part = part;\n    }\n}\nlet InlayHintsHover = class InlayHintsHover extends MarkdownHoverParticipant {\n    constructor(editor, languageService, openerService, configurationService, _resolverService, languageFeaturesService) {\n        super(editor, languageService, openerService, configurationService, languageFeaturesService);\n        this._resolverService = _resolverService;\n        this.hoverOrdinal = 6;\n    }\n    suggestHoverAnchor(mouseEvent) {\n        var _a;\n        const controller = InlayHintsController.get(this._editor);\n        if (!controller) {\n            return null;\n        }\n        if (mouseEvent.target.type !== 6 /* CONTENT_TEXT */) {\n            return null;\n        }\n        const options = (_a = mouseEvent.target.detail.injectedText) === null || _a === void 0 ? void 0 : _a.options;\n        if (!(options instanceof ModelDecorationInjectedTextOptions && options.attachedData instanceof RenderedInlayHintLabelPart)) {\n            return null;\n        }\n        return new InlayHintsHoverAnchor(options.attachedData, this);\n    }\n    computeSync() {\n        return [];\n    }\n    computeAsync(anchor, _lineDecorations, token) {\n        if (!(anchor instanceof InlayHintsHoverAnchor)) {\n            return AsyncIterableObject.EMPTY;\n        }\n        return new AsyncIterableObject((executor) => __awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            const { part } = anchor;\n            yield part.item.resolve(token);\n            if (token.isCancellationRequested) {\n                return;\n            }\n            // (1) Inlay Tooltip\n            let itemTooltip;\n            if (typeof part.item.hint.tooltip === 'string') {\n                itemTooltip = new MarkdownString().appendText(part.item.hint.tooltip);\n            }\n            else if (part.item.hint.tooltip) {\n                itemTooltip = part.item.hint.tooltip;\n            }\n            if (itemTooltip) {\n                executor.emitOne(new MarkdownHover(this, anchor.range, [itemTooltip], 0));\n            }\n            // (2) Inlay Label Part Tooltip\n            let partTooltip;\n            if (typeof part.part.tooltip === 'string') {\n                partTooltip = new MarkdownString().appendText(part.part.tooltip);\n            }\n            else if (part.part.tooltip) {\n                partTooltip = part.part.tooltip;\n            }\n            if (partTooltip) {\n                executor.emitOne(new MarkdownHover(this, anchor.range, [partTooltip], 1));\n            }\n            // (2.2) Inlay Label Part Help Hover\n            if (part.part.location || part.part.command) {\n                let linkHint;\n                const useMetaKey = this._editor.getOption(70 /* multiCursorModifier */) === 'altKey';\n                const kb = useMetaKey\n                    ? platform.isMacintosh\n                        ? localize('links.navigate.kb.meta.mac', \"cmd + click\")\n                        : localize('links.navigate.kb.meta', \"ctrl + click\")\n                    : platform.isMacintosh\n                        ? localize('links.navigate.kb.alt.mac', \"option + click\")\n                        : localize('links.navigate.kb.alt', \"alt + click\");\n                if (part.part.location && part.part.command) {\n                    linkHint = new MarkdownString().appendText(localize('hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb));\n                }\n                else if (part.part.location) {\n                    linkHint = new MarkdownString().appendText(localize('hint.def', 'Go to Definition ({0})', kb));\n                }\n                else if (part.part.command) {\n                    linkHint = new MarkdownString(`[${localize('hint.cmd', \"Execute Command\")}](${asCommandLink(part.part.command)} \"${part.part.command.title}\") (${kb})`, { isTrusted: true });\n                }\n                if (linkHint) {\n                    executor.emitOne(new MarkdownHover(this, anchor.range, [linkHint], 10000));\n                }\n            }\n            // (3) Inlay Label Part Location tooltip\n            const iterable = yield this._resolveInlayHintLabelPartHover(part, token);\n            try {\n                for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield iterable_1.next(), !iterable_1_1.done;) {\n                    let item = iterable_1_1.value;\n                    executor.emitOne(item);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield _a.call(iterable_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }));\n    }\n    _resolveInlayHintLabelPartHover(part, token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!part.part.location) {\n                return AsyncIterableObject.EMPTY;\n            }\n            const { uri, range } = part.part.location;\n            const ref = yield this._resolverService.createModelReference(uri);\n            try {\n                const model = ref.object.textEditorModel;\n                if (!this._languageFeaturesService.hoverProvider.has(model)) {\n                    return AsyncIterableObject.EMPTY;\n                }\n                return getHover(this._languageFeaturesService.hoverProvider, model, new Position(range.startLineNumber, range.startColumn), token)\n                    .filter(item => !isEmptyMarkdownString(item.hover.contents))\n                    .map(item => new MarkdownHover(this, part.item.anchor.range, item.hover.contents, 2 + item.ordinal));\n            }\n            finally {\n                ref.dispose();\n            }\n        });\n    }\n};\nInlayHintsHover = __decorate([\n    __param(1, ILanguageService),\n    __param(2, IOpenerService),\n    __param(3, IConfigurationService),\n    __param(4, ITextModelService),\n    __param(5, ILanguageFeaturesService)\n], InlayHintsHover);\nexport { InlayHintsHover };\n",
      "start": 1711096855776,
      "end": 1711096855902,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855902,
      "end": 1711096855902,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855902,
      "end": 1711096855902,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855902,
      "end": 1711096855902,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855903,
      "end": 1711096855903,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855903,
      "end": 1711096855904,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855904,
      "end": 1711096855904,
      "order": "normal"
    }
  ]
}
