{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/cursor/oneCursor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n/**\n * Represents a single cursor.\n*/\nexport class Cursor {\n    constructor(context) {\n        this._selTrackedRange = null;\n        this._trackSelection = true;\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\n    }\n    dispose(context) {\n        this._removeTrackedRange(context);\n    }\n    startTrackingSelection(context) {\n        this._trackSelection = true;\n        this._updateTrackedRange(context);\n    }\n    stopTrackingSelection(context) {\n        this._trackSelection = false;\n        this._removeTrackedRange(context);\n    }\n    _updateTrackedRange(context) {\n        if (!this._trackSelection) {\n            // don't track the selection\n            return;\n        }\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* AlwaysGrowsWhenTypingAtEdges */);\n    }\n    _removeTrackedRange(context) {\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\n    }\n    asCursorState() {\n        return new CursorState(this.modelState, this.viewState);\n    }\n    readSelectionFromMarkers(context) {\n        const range = context.model._getTrackedRange(this._selTrackedRange);\n        return Selection.fromRange(range, this.modelState.selection.getDirection());\n    }\n    ensureValidState(context) {\n        this._setState(context, this.modelState, this.viewState);\n    }\n    setState(context, modelState, viewState) {\n        this._setState(context, modelState, viewState);\n    }\n    static _validatePositionWithCache(viewModel, position, cacheInput, cacheOutput) {\n        if (position.equals(cacheInput)) {\n            return cacheOutput;\n        }\n        return viewModel.normalizePosition(position, 2 /* None */);\n    }\n    static _validateViewState(viewModel, viewState) {\n        const position = viewState.position;\n        const sStartPosition = viewState.selectionStart.getStartPosition();\n        const sEndPosition = viewState.selectionStart.getEndPosition();\n        const validPosition = viewModel.normalizePosition(position, 2 /* None */);\n        const validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n        const validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n        if (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n            // fast path: the state is valid\n            return viewState;\n        }\n        return new SingleCursorState(Range.fromPositions(validSStartPosition, validSEndPosition), viewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column, validPosition, viewState.leftoverVisibleColumns + position.column - validPosition.column);\n    }\n    _setState(context, modelState, viewState) {\n        if (viewState) {\n            viewState = Cursor._validateViewState(context.viewModel, viewState);\n        }\n        if (!modelState) {\n            if (!viewState) {\n                return;\n            }\n            // We only have the view state => compute the model state\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new model state\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n            const position = context.model.validatePosition(modelState.position);\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n            modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n        }\n        if (!viewState) {\n            // We only have the model state => compute the view state\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new view state\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        this.modelState = modelState;\n        this.viewState = viewState;\n        this._updateTrackedRange(context);\n    }\n}\n",
      "start": 1711096857241,
      "end": 1711096857331,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857331,
      "end": 1711096857331,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857331,
      "end": 1711096857332,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857332,
      "end": 1711096857332,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857332,
      "end": 1711096857332,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857332,
      "end": 1711096857332,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857332,
      "end": 1711096857332,
      "order": "normal"
    }
  ]
}
