{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/browser/ui/button/button.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { addDisposableListener, EventHelper, EventType, reset, trackFocus } from '../../dom.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { EventType as TouchEventType, Gesture } from '../../touch.js';\nimport { renderLabelWithIcons } from '../iconLabel/iconLabels.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { mixin } from '../../../common/objects.js';\nimport './button.css';\nconst defaultOptions = {\n    buttonBackground: Color.fromHex('#0E639C'),\n    buttonHoverBackground: Color.fromHex('#006BB3'),\n    buttonForeground: Color.white\n};\nexport class Button extends Disposable {\n    constructor(container, options) {\n        super();\n        this._onDidClick = this._register(new Emitter());\n        this.options = options || Object.create(null);\n        mixin(this.options, defaultOptions, false);\n        this.buttonForeground = this.options.buttonForeground;\n        this.buttonBackground = this.options.buttonBackground;\n        this.buttonHoverBackground = this.options.buttonHoverBackground;\n        this.buttonSecondaryForeground = this.options.buttonSecondaryForeground;\n        this.buttonSecondaryBackground = this.options.buttonSecondaryBackground;\n        this.buttonSecondaryHoverBackground = this.options.buttonSecondaryHoverBackground;\n        this.buttonBorder = this.options.buttonBorder;\n        this._element = document.createElement('a');\n        this._element.classList.add('monaco-button');\n        this._element.tabIndex = 0;\n        this._element.setAttribute('role', 'button');\n        container.appendChild(this._element);\n        this._register(Gesture.addTarget(this._element));\n        [EventType.CLICK, TouchEventType.Tap].forEach(eventType => {\n            this._register(addDisposableListener(this._element, eventType, e => {\n                if (!this.enabled) {\n                    EventHelper.stop(e);\n                    return;\n                }\n                this._onDidClick.fire(e);\n            }));\n        });\n        this._register(addDisposableListener(this._element, EventType.KEY_DOWN, e => {\n            const event = new StandardKeyboardEvent(e);\n            let eventHandled = false;\n            if (this.enabled && (event.equals(3 /* Enter */) || event.equals(10 /* Space */))) {\n                this._onDidClick.fire(e);\n                eventHandled = true;\n            }\n            else if (event.equals(9 /* Escape */)) {\n                this._element.blur();\n                eventHandled = true;\n            }\n            if (eventHandled) {\n                EventHelper.stop(event, true);\n            }\n        }));\n        this._register(addDisposableListener(this._element, EventType.MOUSE_OVER, e => {\n            if (!this._element.classList.contains('disabled')) {\n                this.setHoverBackground();\n            }\n        }));\n        this._register(addDisposableListener(this._element, EventType.MOUSE_OUT, e => {\n            this.applyStyles(); // restore standard styles\n        }));\n        // Also set hover background when button is focused for feedback\n        this.focusTracker = this._register(trackFocus(this._element));\n        this._register(this.focusTracker.onDidFocus(() => this.setHoverBackground()));\n        this._register(this.focusTracker.onDidBlur(() => this.applyStyles())); // restore standard styles\n        this.applyStyles();\n    }\n    get onDidClick() { return this._onDidClick.event; }\n    setHoverBackground() {\n        let hoverBackground;\n        if (this.options.secondary) {\n            hoverBackground = this.buttonSecondaryHoverBackground ? this.buttonSecondaryHoverBackground.toString() : null;\n        }\n        else {\n            hoverBackground = this.buttonHoverBackground ? this.buttonHoverBackground.toString() : null;\n        }\n        if (hoverBackground) {\n            this._element.style.backgroundColor = hoverBackground;\n        }\n    }\n    style(styles) {\n        this.buttonForeground = styles.buttonForeground;\n        this.buttonBackground = styles.buttonBackground;\n        this.buttonHoverBackground = styles.buttonHoverBackground;\n        this.buttonSecondaryForeground = styles.buttonSecondaryForeground;\n        this.buttonSecondaryBackground = styles.buttonSecondaryBackground;\n        this.buttonSecondaryHoverBackground = styles.buttonSecondaryHoverBackground;\n        this.buttonBorder = styles.buttonBorder;\n        this.applyStyles();\n    }\n    applyStyles() {\n        if (this._element) {\n            let background, foreground;\n            if (this.options.secondary) {\n                foreground = this.buttonSecondaryForeground ? this.buttonSecondaryForeground.toString() : '';\n                background = this.buttonSecondaryBackground ? this.buttonSecondaryBackground.toString() : '';\n            }\n            else {\n                foreground = this.buttonForeground ? this.buttonForeground.toString() : '';\n                background = this.buttonBackground ? this.buttonBackground.toString() : '';\n            }\n            const border = this.buttonBorder ? this.buttonBorder.toString() : '';\n            this._element.style.color = foreground;\n            this._element.style.backgroundColor = background;\n            this._element.style.borderWidth = border ? '1px' : '';\n            this._element.style.borderStyle = border ? 'solid' : '';\n            this._element.style.borderColor = border;\n        }\n    }\n    get element() {\n        return this._element;\n    }\n    set label(value) {\n        this._element.classList.add('monaco-text-button');\n        if (this.options.supportIcons) {\n            reset(this._element, ...renderLabelWithIcons(value));\n        }\n        else {\n            this._element.textContent = value;\n        }\n        if (typeof this.options.title === 'string') {\n            this._element.title = this.options.title;\n        }\n        else if (this.options.title) {\n            this._element.title = value;\n        }\n    }\n    set enabled(value) {\n        if (value) {\n            this._element.classList.remove('disabled');\n            this._element.setAttribute('aria-disabled', String(false));\n            this._element.tabIndex = 0;\n        }\n        else {\n            this._element.classList.add('disabled');\n            this._element.setAttribute('aria-disabled', String(true));\n        }\n    }\n    get enabled() {\n        return !this._element.classList.contains('disabled');\n    }\n}\n",
      "start": 1711096857687,
      "end": 1711096857806,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857806,
      "end": 1711096857806,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857806,
      "end": 1711096857806,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857807,
      "end": 1711096857807,
      "order": "normal"
    }
  ]
}
