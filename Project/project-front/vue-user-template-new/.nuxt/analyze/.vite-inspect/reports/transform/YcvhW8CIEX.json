{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/foldingRanges.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const MAX_FOLDING_REGIONS = 0xFFFF;\nexport const MAX_LINE_NUMBER = 0xFFFFFF;\nconst MASK_INDENT = 0xFF000000;\nexport class FoldingRegions {\n    constructor(startIndexes, endIndexes, types) {\n        if (startIndexes.length !== endIndexes.length || startIndexes.length > MAX_FOLDING_REGIONS) {\n            throw new Error('invalid startIndexes or endIndexes size');\n        }\n        this._startIndexes = startIndexes;\n        this._endIndexes = endIndexes;\n        this._collapseStates = new Uint32Array(Math.ceil(startIndexes.length / 32));\n        this._types = types;\n        this._parentsComputed = false;\n    }\n    ensureParentIndices() {\n        if (!this._parentsComputed) {\n            this._parentsComputed = true;\n            let parentIndexes = [];\n            let isInsideLast = (startLineNumber, endLineNumber) => {\n                let index = parentIndexes[parentIndexes.length - 1];\n                return this.getStartLineNumber(index) <= startLineNumber && this.getEndLineNumber(index) >= endLineNumber;\n            };\n            for (let i = 0, len = this._startIndexes.length; i < len; i++) {\n                let startLineNumber = this._startIndexes[i];\n                let endLineNumber = this._endIndexes[i];\n                if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n                    throw new Error('startLineNumber or endLineNumber must not exceed ' + MAX_LINE_NUMBER);\n                }\n                while (parentIndexes.length > 0 && !isInsideLast(startLineNumber, endLineNumber)) {\n                    parentIndexes.pop();\n                }\n                let parentIndex = parentIndexes.length > 0 ? parentIndexes[parentIndexes.length - 1] : -1;\n                parentIndexes.push(i);\n                this._startIndexes[i] = startLineNumber + ((parentIndex & 0xFF) << 24);\n                this._endIndexes[i] = endLineNumber + ((parentIndex & 0xFF00) << 16);\n            }\n        }\n    }\n    get length() {\n        return this._startIndexes.length;\n    }\n    getStartLineNumber(index) {\n        return this._startIndexes[index] & MAX_LINE_NUMBER;\n    }\n    getEndLineNumber(index) {\n        return this._endIndexes[index] & MAX_LINE_NUMBER;\n    }\n    getType(index) {\n        return this._types ? this._types[index] : undefined;\n    }\n    hasTypes() {\n        return !!this._types;\n    }\n    isCollapsed(index) {\n        let arrayIndex = (index / 32) | 0;\n        let bit = index % 32;\n        return (this._collapseStates[arrayIndex] & (1 << bit)) !== 0;\n    }\n    setCollapsed(index, newState) {\n        let arrayIndex = (index / 32) | 0;\n        let bit = index % 32;\n        let value = this._collapseStates[arrayIndex];\n        if (newState) {\n            this._collapseStates[arrayIndex] = value | (1 << bit);\n        }\n        else {\n            this._collapseStates[arrayIndex] = value & ~(1 << bit);\n        }\n    }\n    setCollapsedAllOfType(type, newState) {\n        let hasChanged = false;\n        if (this._types) {\n            for (let i = 0; i < this._types.length; i++) {\n                if (this._types[i] === type) {\n                    this.setCollapsed(i, newState);\n                    hasChanged = true;\n                }\n            }\n        }\n        return hasChanged;\n    }\n    toRegion(index) {\n        return new FoldingRegion(this, index);\n    }\n    getParentIndex(index) {\n        this.ensureParentIndices();\n        let parent = ((this._startIndexes[index] & MASK_INDENT) >>> 24) + ((this._endIndexes[index] & MASK_INDENT) >>> 16);\n        if (parent === MAX_FOLDING_REGIONS) {\n            return -1;\n        }\n        return parent;\n    }\n    contains(index, line) {\n        return this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;\n    }\n    findIndex(line) {\n        let low = 0, high = this._startIndexes.length;\n        if (high === 0) {\n            return -1; // no children\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (line < this.getStartLineNumber(mid)) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low - 1;\n    }\n    findRange(line) {\n        let index = this.findIndex(line);\n        if (index >= 0) {\n            let endLineNumber = this.getEndLineNumber(index);\n            if (endLineNumber >= line) {\n                return index;\n            }\n            index = this.getParentIndex(index);\n            while (index !== -1) {\n                if (this.contains(index, line)) {\n                    return index;\n                }\n                index = this.getParentIndex(index);\n            }\n        }\n        return -1;\n    }\n    toString() {\n        let res = [];\n        for (let i = 0; i < this.length; i++) {\n            res[i] = `[${this.isCollapsed(i) ? '+' : '-'}] ${this.getStartLineNumber(i)}/${this.getEndLineNumber(i)}`;\n        }\n        return res.join(', ');\n    }\n}\nexport class FoldingRegion {\n    constructor(ranges, index) {\n        this.ranges = ranges;\n        this.index = index;\n    }\n    get startLineNumber() {\n        return this.ranges.getStartLineNumber(this.index);\n    }\n    get endLineNumber() {\n        return this.ranges.getEndLineNumber(this.index);\n    }\n    get regionIndex() {\n        return this.index;\n    }\n    get parentIndex() {\n        return this.ranges.getParentIndex(this.index);\n    }\n    get isCollapsed() {\n        return this.ranges.isCollapsed(this.index);\n    }\n    containedBy(range) {\n        return range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;\n    }\n    containsLine(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;\n    }\n}\n",
      "start": 1711096856690,
      "end": 1711096856800,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856800,
      "end": 1711096856800,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856801,
      "end": 1711096856801,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856801,
      "end": 1711096856802,
      "order": "normal"
    }
  ]
}
