{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n",
      "start": 1711096856460,
      "end": 1711096856540,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856540,
      "end": 1711096856540,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856540,
      "end": 1711096856540,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856540,
      "end": 1711096856541,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856541,
      "end": 1711096856541,
      "order": "normal"
    }
  ]
}
