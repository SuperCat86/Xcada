{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IntervalTimer, TimeoutTimer } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as nls from '../../../nls.js';\nconst HIGH_FREQ_COMMANDS = /^(cursor|delete)/;\nexport class AbstractKeybindingService extends Disposable {\n    constructor(_contextKeyService, _commandService, _telemetryService, _notificationService, _logService) {\n        super();\n        this._contextKeyService = _contextKeyService;\n        this._commandService = _commandService;\n        this._telemetryService = _telemetryService;\n        this._notificationService = _notificationService;\n        this._logService = _logService;\n        this._onDidUpdateKeybindings = this._register(new Emitter());\n        this._currentChord = null;\n        this._currentChordChecker = new IntervalTimer();\n        this._currentChordStatusMessage = null;\n        this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n        this._currentSingleModifier = null;\n        this._currentSingleModifierClearTimeout = new TimeoutTimer();\n        this._logging = false;\n    }\n    get onDidUpdateKeybindings() {\n        return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n    }\n    dispose() {\n        super.dispose();\n    }\n    _log(str) {\n        if (this._logging) {\n            this._logService.info(`[KeybindingService]: ${str}`);\n        }\n    }\n    getKeybindings() {\n        return this._getResolver().getKeybindings();\n    }\n    lookupKeybinding(commandId, context) {\n        const result = this._getResolver().lookupPrimaryKeybinding(commandId, context || this._contextKeyService);\n        if (!result) {\n            return undefined;\n        }\n        return result.resolvedKeybinding;\n    }\n    dispatchEvent(e, target) {\n        return this._dispatch(e, target);\n    }\n    softDispatch(e, target) {\n        const keybinding = this.resolveKeyboardEvent(e);\n        if (keybinding.isChord()) {\n            console.warn('Unexpected keyboard event mapped to a chord');\n            return null;\n        }\n        const [firstPart,] = keybinding.getDispatchParts();\n        if (firstPart === null) {\n            // cannot be dispatched, probably only modifier keys\n            return null;\n        }\n        const contextValue = this._contextKeyService.getContext(target);\n        const currentChord = this._currentChord ? this._currentChord.keypress : null;\n        return this._getResolver().resolve(contextValue, currentChord, firstPart);\n    }\n    _enterChordMode(firstPart, keypressLabel) {\n        this._currentChord = {\n            keypress: firstPart,\n            label: keypressLabel\n        };\n        this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n        const chordEnterTime = Date.now();\n        this._currentChordChecker.cancelAndSet(() => {\n            if (!this._documentHasFocus()) {\n                // Focus has been lost => leave chord mode\n                this._leaveChordMode();\n                return;\n            }\n            if (Date.now() - chordEnterTime > 5000) {\n                // 5 seconds elapsed => leave chord mode\n                this._leaveChordMode();\n            }\n        }, 500);\n    }\n    _leaveChordMode() {\n        if (this._currentChordStatusMessage) {\n            this._currentChordStatusMessage.dispose();\n            this._currentChordStatusMessage = null;\n        }\n        this._currentChordChecker.cancel();\n        this._currentChord = null;\n    }\n    _dispatch(e, target) {\n        return this._doDispatch(this.resolveKeyboardEvent(e), target, /*isSingleModiferChord*/ false);\n    }\n    _singleModifierDispatch(e, target) {\n        const keybinding = this.resolveKeyboardEvent(e);\n        const [singleModifier,] = keybinding.getSingleModifierDispatchParts();\n        if (singleModifier) {\n            if (this._ignoreSingleModifiers.has(singleModifier)) {\n                this._log(`+ Ignoring single modifier ${singleModifier} due to it being pressed together with other keys.`);\n                this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n                this._currentSingleModifierClearTimeout.cancel();\n                this._currentSingleModifier = null;\n                return false;\n            }\n            this._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n            if (this._currentSingleModifier === null) {\n                // we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n                this._log(`+ Storing single modifier for possible chord ${singleModifier}.`);\n                this._currentSingleModifier = singleModifier;\n                this._currentSingleModifierClearTimeout.cancelAndSet(() => {\n                    this._log(`+ Clearing single modifier due to 300ms elapsed.`);\n                    this._currentSingleModifier = null;\n                }, 300);\n                return false;\n            }\n            if (singleModifier === this._currentSingleModifier) {\n                // bingo!\n                this._log(`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`);\n                this._currentSingleModifierClearTimeout.cancel();\n                this._currentSingleModifier = null;\n                return this._doDispatch(keybinding, target, /*isSingleModiferChord*/ true);\n            }\n            this._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${singleModifier}`);\n            this._currentSingleModifierClearTimeout.cancel();\n            this._currentSingleModifier = null;\n            return false;\n        }\n        // When pressing a modifier and holding it pressed with any other modifier or key combination,\n        // the pressed modifiers should no longer be considered for single modifier dispatch.\n        const [firstPart,] = keybinding.getParts();\n        this._ignoreSingleModifiers = new KeybindingModifierSet(firstPart);\n        if (this._currentSingleModifier !== null) {\n            this._log(`+ Clearing single modifier due to other key up.`);\n        }\n        this._currentSingleModifierClearTimeout.cancel();\n        this._currentSingleModifier = null;\n        return false;\n    }\n    _doDispatch(keybinding, target, isSingleModiferChord = false) {\n        let shouldPreventDefault = false;\n        if (keybinding.isChord()) {\n            console.warn('Unexpected keyboard event mapped to a chord');\n            return false;\n        }\n        let firstPart = null; // the first keybinding i.e. Ctrl+K\n        let currentChord = null; // the \"second\" keybinding i.e. Ctrl+K \"Ctrl+D\"\n        if (isSingleModiferChord) {\n            const [dispatchKeyname,] = keybinding.getSingleModifierDispatchParts();\n            firstPart = dispatchKeyname;\n            currentChord = dispatchKeyname;\n        }\n        else {\n            [firstPart,] = keybinding.getDispatchParts();\n            currentChord = this._currentChord ? this._currentChord.keypress : null;\n        }\n        if (firstPart === null) {\n            this._log(`\\\\ Keyboard event cannot be dispatched in keydown phase.`);\n            // cannot be dispatched, probably only modifier keys\n            return shouldPreventDefault;\n        }\n        const contextValue = this._contextKeyService.getContext(target);\n        const keypressLabel = keybinding.getLabel();\n        const resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\n        this._logService.trace('KeybindingService#dispatch', keypressLabel, resolveResult === null || resolveResult === void 0 ? void 0 : resolveResult.commandId);\n        if (resolveResult && resolveResult.enterChord) {\n            shouldPreventDefault = true;\n            this._enterChordMode(firstPart, keypressLabel);\n            return shouldPreventDefault;\n        }\n        if (this._currentChord) {\n            if (!resolveResult || !resolveResult.commandId) {\n                this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n                shouldPreventDefault = true;\n            }\n        }\n        this._leaveChordMode();\n        if (resolveResult && resolveResult.commandId) {\n            if (!resolveResult.bubble) {\n                shouldPreventDefault = true;\n            }\n            if (typeof resolveResult.commandArgs === 'undefined') {\n                this._commandService.executeCommand(resolveResult.commandId).then(undefined, err => this._notificationService.warn(err));\n            }\n            else {\n                this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, err => this._notificationService.warn(err));\n            }\n            if (!HIGH_FREQ_COMMANDS.test(resolveResult.commandId)) {\n                this._telemetryService.publicLog2('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding' });\n            }\n        }\n        return shouldPreventDefault;\n    }\n    mightProducePrintableCharacter(event) {\n        if (event.ctrlKey || event.metaKey) {\n            // ignore ctrl/cmd-combination but not shift/alt-combinatios\n            return false;\n        }\n        // weak check for certain ranges. this is properly implemented in a subclass\n        // with access to the KeyboardMapperFactory.\n        if ((event.keyCode >= 31 /* KeyA */ && event.keyCode <= 56 /* KeyZ */)\n            || (event.keyCode >= 21 /* Digit0 */ && event.keyCode <= 30 /* Digit9 */)) {\n            return true;\n        }\n        return false;\n    }\n}\nclass KeybindingModifierSet {\n    constructor(source) {\n        this._ctrlKey = source ? source.ctrlKey : false;\n        this._shiftKey = source ? source.shiftKey : false;\n        this._altKey = source ? source.altKey : false;\n        this._metaKey = source ? source.metaKey : false;\n    }\n    has(modifier) {\n        switch (modifier) {\n            case 'ctrl': return this._ctrlKey;\n            case 'shift': return this._shiftKey;\n            case 'alt': return this._altKey;\n            case 'meta': return this._metaKey;\n        }\n    }\n}\nKeybindingModifierSet.EMPTY = new KeybindingModifierSet(null);\n",
      "start": 1711096856199,
      "end": 1711096856287,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856287,
      "end": 1711096856287,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856287,
      "end": 1711096856288,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856288,
      "end": 1711096856288,
      "order": "normal"
    }
  ]
}
