{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorationsService.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { IMarkerService, MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { OverviewRulerLane, MinimapPosition } from '../model.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { overviewRulerWarning, overviewRulerInfo, overviewRulerError } from '../core/editorColorRegistry.js';\nimport { IModelService } from './model.js';\nimport { Range } from '../core/range.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { minimapWarning, minimapError } from '../../../platform/theme/common/colorRegistry.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nclass MarkerDecorations extends Disposable {\n    constructor(model) {\n        super();\n        this.model = model;\n        this._markersData = new Map();\n        this._register(toDisposable(() => {\n            this.model.deltaDecorations([...this._markersData.keys()], []);\n            this._markersData.clear();\n        }));\n    }\n    update(markers, newDecorations) {\n        const oldIds = [...this._markersData.keys()];\n        this._markersData.clear();\n        const ids = this.model.deltaDecorations(oldIds, newDecorations);\n        for (let index = 0; index < ids.length; index++) {\n            this._markersData.set(ids[index], markers[index]);\n        }\n        return oldIds.length !== 0 || ids.length !== 0;\n    }\n    getMarker(decoration) {\n        return this._markersData.get(decoration.id);\n    }\n}\nlet MarkerDecorationsService = class MarkerDecorationsService extends Disposable {\n    constructor(modelService, _markerService) {\n        super();\n        this._markerService = _markerService;\n        this._onDidChangeMarker = this._register(new Emitter());\n        this._markerDecorations = new ResourceMap();\n        modelService.getModels().forEach(model => this._onModelAdded(model));\n        this._register(modelService.onModelAdded(this._onModelAdded, this));\n        this._register(modelService.onModelRemoved(this._onModelRemoved, this));\n        this._register(this._markerService.onMarkerChanged(this._handleMarkerChange, this));\n    }\n    dispose() {\n        super.dispose();\n        this._markerDecorations.forEach(value => value.dispose());\n        this._markerDecorations.clear();\n    }\n    getMarker(uri, decoration) {\n        const markerDecorations = this._markerDecorations.get(uri);\n        return markerDecorations ? (markerDecorations.getMarker(decoration) || null) : null;\n    }\n    _handleMarkerChange(changedResources) {\n        changedResources.forEach((resource) => {\n            const markerDecorations = this._markerDecorations.get(resource);\n            if (markerDecorations) {\n                this._updateDecorations(markerDecorations);\n            }\n        });\n    }\n    _onModelAdded(model) {\n        const markerDecorations = new MarkerDecorations(model);\n        this._markerDecorations.set(model.uri, markerDecorations);\n        this._updateDecorations(markerDecorations);\n    }\n    _onModelRemoved(model) {\n        const markerDecorations = this._markerDecorations.get(model.uri);\n        if (markerDecorations) {\n            markerDecorations.dispose();\n            this._markerDecorations.delete(model.uri);\n        }\n        // clean up markers for internal, transient models\n        if (model.uri.scheme === Schemas.inMemory\n            || model.uri.scheme === Schemas.internal\n            || model.uri.scheme === Schemas.vscode) {\n            if (this._markerService) {\n                this._markerService.read({ resource: model.uri }).map(marker => marker.owner).forEach(owner => this._markerService.remove(owner, [model.uri]));\n            }\n        }\n    }\n    _updateDecorations(markerDecorations) {\n        // Limit to the first 500 errors/warnings\n        const markers = this._markerService.read({ resource: markerDecorations.model.uri, take: 500 });\n        const newModelDecorations = markers.map((marker) => {\n            return {\n                range: this._createDecorationRange(markerDecorations.model, marker),\n                options: this._createDecorationOption(marker)\n            };\n        });\n        if (markerDecorations.update(markers, newModelDecorations)) {\n            this._onDidChangeMarker.fire(markerDecorations.model);\n        }\n    }\n    _createDecorationRange(model, rawMarker) {\n        let ret = Range.lift(rawMarker);\n        if (rawMarker.severity === MarkerSeverity.Hint && !this._hasMarkerTag(rawMarker, 1 /* Unnecessary */) && !this._hasMarkerTag(rawMarker, 2 /* Deprecated */)) {\n            // * never render hints on multiple lines\n            // * make enough space for three dots\n            ret = ret.setEndPosition(ret.startLineNumber, ret.startColumn + 2);\n        }\n        ret = model.validateRange(ret);\n        if (ret.isEmpty()) {\n            const maxColumn = model.getLineLastNonWhitespaceColumn(ret.startLineNumber) ||\n                model.getLineMaxColumn(ret.startLineNumber);\n            if (maxColumn === 1 || ret.endColumn >= maxColumn) {\n                // empty line or behind eol\n                // keep the range as is, it will be rendered 1ch wide\n                return ret;\n            }\n            const word = model.getWordAtPosition(ret.getStartPosition());\n            if (word) {\n                ret = new Range(ret.startLineNumber, word.startColumn, ret.endLineNumber, word.endColumn);\n            }\n        }\n        else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\n            let minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\n            if (minColumn < ret.endColumn) {\n                ret = new Range(ret.startLineNumber, minColumn, ret.endLineNumber, ret.endColumn);\n                rawMarker.startColumn = minColumn;\n            }\n        }\n        return ret;\n    }\n    _createDecorationOption(marker) {\n        let className;\n        let color = undefined;\n        let zIndex;\n        let inlineClassName = undefined;\n        let minimap;\n        switch (marker.severity) {\n            case MarkerSeverity.Hint:\n                if (this._hasMarkerTag(marker, 2 /* Deprecated */)) {\n                    className = undefined;\n                }\n                else if (this._hasMarkerTag(marker, 1 /* Unnecessary */)) {\n                    className = \"squiggly-unnecessary\" /* EditorUnnecessaryDecoration */;\n                }\n                else {\n                    className = \"squiggly-hint\" /* EditorHintDecoration */;\n                }\n                zIndex = 0;\n                break;\n            case MarkerSeverity.Warning:\n                className = \"squiggly-warning\" /* EditorWarningDecoration */;\n                color = themeColorFromId(overviewRulerWarning);\n                zIndex = 20;\n                minimap = {\n                    color: themeColorFromId(minimapWarning),\n                    position: MinimapPosition.Inline\n                };\n                break;\n            case MarkerSeverity.Info:\n                className = \"squiggly-info\" /* EditorInfoDecoration */;\n                color = themeColorFromId(overviewRulerInfo);\n                zIndex = 10;\n                break;\n            case MarkerSeverity.Error:\n            default:\n                className = \"squiggly-error\" /* EditorErrorDecoration */;\n                color = themeColorFromId(overviewRulerError);\n                zIndex = 30;\n                minimap = {\n                    color: themeColorFromId(minimapError),\n                    position: MinimapPosition.Inline\n                };\n                break;\n        }\n        if (marker.tags) {\n            if (marker.tags.indexOf(1 /* Unnecessary */) !== -1) {\n                inlineClassName = \"squiggly-inline-unnecessary\" /* EditorUnnecessaryInlineDecoration */;\n            }\n            if (marker.tags.indexOf(2 /* Deprecated */) !== -1) {\n                inlineClassName = \"squiggly-inline-deprecated\" /* EditorDeprecatedInlineDecoration */;\n            }\n        }\n        return {\n            description: 'marker-decoration',\n            stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n            className,\n            showIfCollapsed: true,\n            overviewRuler: {\n                color,\n                position: OverviewRulerLane.Right\n            },\n            minimap,\n            zIndex,\n            inlineClassName,\n        };\n    }\n    _hasMarkerTag(marker, tag) {\n        if (marker.tags) {\n            return marker.tags.indexOf(tag) >= 0;\n        }\n        return false;\n    }\n};\nMarkerDecorationsService = __decorate([\n    __param(0, IModelService),\n    __param(1, IMarkerService)\n], MarkerDecorationsService);\nexport { MarkerDecorationsService };\n",
      "start": 1711096856274,
      "end": 1711096856346,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856346,
      "end": 1711096856346,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856346,
      "end": 1711096856347,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856347,
      "end": 1711096856347,
      "order": "normal"
    }
  ]
}
