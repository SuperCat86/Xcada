{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, lengthToObj, toLength } from './length.js';\nexport class TextEditInfo {\n    constructor(startOffset, endOffset, newLength) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.newLength = newLength;\n    }\n}\nexport class BeforeEditPositionMapper {\n    /**\n     * @param edits Must be sorted by offset in ascending order.\n    */\n    constructor(edits, documentLength) {\n        this.documentLength = documentLength;\n        this.nextEditIdx = 0;\n        this.deltaOldToNewLineCount = 0;\n        this.deltaOldToNewColumnCount = 0;\n        this.deltaLineIdxInOld = -1;\n        this.edits = edits.map(edit => TextEditInfoCache.from(edit));\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getOffsetBeforeChange(offset) {\n        this.adjustNextEdit(offset);\n        return this.translateCurToOld(offset);\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getDistanceToNextChange(offset) {\n        this.adjustNextEdit(offset);\n        const nextEdit = this.edits[this.nextEditIdx];\n        const nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : this.documentLength;\n        return lengthDiffNonNegative(offset, nextChangeOffset);\n    }\n    translateOldToCur(oldOffsetObj) {\n        if (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n        }\n    }\n    translateCurToOld(newOffset) {\n        const offsetObj = lengthToObj(newOffset);\n        if (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n        }\n    }\n    adjustNextEdit(offset) {\n        while (this.nextEditIdx < this.edits.length) {\n            const nextEdit = this.edits[this.nextEditIdx];\n            // After applying the edit, what is its end offset (considering all previous edits)?\n            const nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n            if (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n                // We are after the edit, skip it\n                this.nextEditIdx++;\n                const nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n                // Before applying the edit, what is its end offset (considering all previous edits)?\n                const nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n                const lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n                this.deltaOldToNewLineCount += lineDelta;\n                const previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n                const columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n                this.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n                this.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n            }\n            else {\n                // We are in or before the edit.\n                break;\n            }\n        }\n    }\n}\nclass TextEditInfoCache {\n    constructor(startOffset, endOffset, textLength) {\n        this.endOffsetBeforeObj = lengthToObj(endOffset);\n        this.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n        this.offsetObj = lengthToObj(startOffset);\n    }\n    static from(edit) {\n        return new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n    }\n}\n",
      "start": 1711096857589,
      "end": 1711096857681,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857681,
      "end": 1711096857681,
      "order": "normal"
    }
  ]
}
