{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\nexport class PieceTreeTextBufferFactory {\n    constructor(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _containsUnusualLineTerminators, _isBasicASCII, _normalizeEOL) {\n        this._chunks = _chunks;\n        this._bom = _bom;\n        this._cr = _cr;\n        this._lf = _lf;\n        this._crlf = _crlf;\n        this._containsRTL = _containsRTL;\n        this._containsUnusualLineTerminators = _containsUnusualLineTerminators;\n        this._isBasicASCII = _isBasicASCII;\n        this._normalizeEOL = _normalizeEOL;\n    }\n    _getEOL(defaultEOL) {\n        const totalEOLCount = this._cr + this._lf + this._crlf;\n        const totalCRCount = this._cr + this._crlf;\n        if (totalEOLCount === 0) {\n            // This is an empty file or a file with precisely one line\n            return (defaultEOL === 1 /* LF */ ? '\\n' : '\\r\\n');\n        }\n        if (totalCRCount > totalEOLCount / 2) {\n            // More than half of the file contains \\r\\n ending lines\n            return '\\r\\n';\n        }\n        // At least one line more ends in \\n\n        return '\\n';\n    }\n    create(defaultEOL) {\n        const eol = this._getEOL(defaultEOL);\n        const chunks = this._chunks;\n        if (this._normalizeEOL &&\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\n            // Normalize pieces\n            for (let i = 0, len = chunks.length; i < len; i++) {\n                const str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n                const newLineStart = createLineStartsFast(str);\n                chunks[i] = new StringBuffer(str, newLineStart);\n            }\n        }\n        const textBuffer = new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);\n        return { textBuffer: textBuffer, disposable: textBuffer };\n    }\n}\nexport class PieceTreeTextBufferBuilder {\n    constructor() {\n        this.chunks = [];\n        this.BOM = '';\n        this._hasPreviousChar = false;\n        this._previousChar = 0;\n        this._tmpLineStarts = [];\n        this.cr = 0;\n        this.lf = 0;\n        this.crlf = 0;\n        this.containsRTL = false;\n        this.containsUnusualLineTerminators = false;\n        this.isBasicASCII = true;\n    }\n    acceptChunk(chunk) {\n        if (chunk.length === 0) {\n            return;\n        }\n        if (this.chunks.length === 0) {\n            if (strings.startsWithUTF8BOM(chunk)) {\n                this.BOM = strings.UTF8_BOM_CHARACTER;\n                chunk = chunk.substr(1);\n            }\n        }\n        const lastChar = chunk.charCodeAt(chunk.length - 1);\n        if (lastChar === 13 /* CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n            // last character is \\r or a high surrogate => keep it back\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n            this._hasPreviousChar = true;\n            this._previousChar = lastChar;\n        }\n        else {\n            this._acceptChunk1(chunk, false);\n            this._hasPreviousChar = false;\n            this._previousChar = lastChar;\n        }\n    }\n    _acceptChunk1(chunk, allowEmptyStrings) {\n        if (!allowEmptyStrings && chunk.length === 0) {\n            // Nothing to do\n            return;\n        }\n        if (this._hasPreviousChar) {\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n        }\n        else {\n            this._acceptChunk2(chunk);\n        }\n    }\n    _acceptChunk2(chunk) {\n        const lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n        this.cr += lineStarts.cr;\n        this.lf += lineStarts.lf;\n        this.crlf += lineStarts.crlf;\n        if (this.isBasicASCII) {\n            this.isBasicASCII = lineStarts.isBasicASCII;\n        }\n        if (!this.isBasicASCII && !this.containsRTL) {\n            // No need to check if it is basic ASCII\n            this.containsRTL = strings.containsRTL(chunk);\n        }\n        if (!this.isBasicASCII && !this.containsUnusualLineTerminators) {\n            // No need to check if it is basic ASCII\n            this.containsUnusualLineTerminators = strings.containsUnusualLineTerminators(chunk);\n        }\n    }\n    finish(normalizeEOL = true) {\n        this._finish();\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.containsUnusualLineTerminators, this.isBasicASCII, normalizeEOL);\n    }\n    _finish() {\n        if (this.chunks.length === 0) {\n            this._acceptChunk1('', true);\n        }\n        if (this._hasPreviousChar) {\n            this._hasPreviousChar = false;\n            // recreate last chunk\n            const lastChunk = this.chunks[this.chunks.length - 1];\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\n            const newLineStarts = createLineStartsFast(lastChunk.buffer);\n            lastChunk.lineStarts = newLineStarts;\n            if (this._previousChar === 13 /* CarriageReturn */) {\n                this.cr++;\n            }\n        }\n    }\n}\n",
      "start": 1711096856532,
      "end": 1711096856626,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856626,
      "end": 1711096856626,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856626,
      "end": 1711096856627,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856627,
      "end": 1711096856627,
      "order": "normal"
    }
  ]
}
