{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    undoStopBefore: true,\n    undoStopAfter: true,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n    constructor(_editor, _instantiationService, _logService, contextKeyService) {\n        this._editor = _editor;\n        this._instantiationService = _instantiationService;\n        this._logService = _logService;\n        this._snippetListener = new DisposableStore();\n        this._modelVersionId = -1;\n        this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    static get(editor) {\n        return editor.getContribution(SnippetController2.ID);\n    }\n    dispose() {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._snippetListener.dispose();\n    }\n    insert(template, opts) {\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : Object.assign(Object.assign({}, _defaultOptions), opts));\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    }\n    _doInsert(template, opts) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener.clear();\n        if (opts.undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new SnippetSession(this._editor, template, opts);\n            this._session.insert();\n        }\n        else {\n            this._session.merge(template, opts);\n        }\n        if (opts.undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        this._updateState();\n        this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n    }\n    _updateState() {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            this._editor.getModel().pushStackElement();\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    }\n    _handleChoice() {\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        const { choice } = this._session;\n        if (!choice) {\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== choice) {\n            this._currentChoice = choice;\n            this._editor.setSelections(this._editor.getSelections()\n                .map(s => Selection.fromPositions(s.getStartPosition())));\n            const [first] = choice.options;\n            this._instantiationService.invokeFunction(showSimpleSuggestions, this._editor, choice.options.map((option, i) => {\n                // let before = choice.options.slice(0, i);\n                // let after = choice.options.slice(i);\n                return {\n                    kind: 13 /* Value */,\n                    label: option.value,\n                    insertText: option.value,\n                    // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n                    // snippetType: 'textmate',\n                    sortText: 'a'.repeat(i + 1),\n                    range: Range.fromPositions(this._editor.getPosition(), this._editor.getPosition().delta(0, first.value.length))\n                };\n            }));\n        }\n    }\n    finish() {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    }\n    cancel(resetSelection = false) {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._snippetListener.clear();\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    }\n    prev() {\n        if (this._session) {\n            this._session.prev();\n        }\n        this._updateState();\n    }\n    next() {\n        if (this._session) {\n            this._session.next();\n        }\n        this._updateState();\n    }\n    isInSnippet() {\n        return Boolean(this._inSnippet.get());\n    }\n};\nSnippetController2.ID = 'snippetController2';\nSnippetController2.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\"));\nSnippetController2.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\"));\nSnippetController2.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\"));\nSnippetController2 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, ILogService),\n    __param(3, IContextKeyService)\n], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: ctrl => ctrl.next(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2 /* Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: ctrl => ctrl.prev(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 2 /* Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.cancel(true),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 9 /* Escape */,\n        secondary: [1024 /* Shift */ | 9 /* Escape */]\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.finish(),\n    // kbOpts: {\n    // \tweight: KeybindingWeight.EditorContrib + 30,\n    // \tkbExpr: EditorContextKeys.textFocus,\n    // \tprimary: KeyCode.Enter,\n    // }\n}));\n",
      "start": 1711096854591,
      "end": 1711096854778,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096854778,
      "end": 1711096854778,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096854778,
      "end": 1711096854779,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096854779,
      "end": 1711096854780,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096854780,
      "end": 1711096854780,
      "order": "normal"
    }
  ]
}
