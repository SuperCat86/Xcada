{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/hover/browser/hoverOperation.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { createCancelableAsyncIterable, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class HoverResult {\n    constructor(value, isComplete, hasLoadingMessage) {\n        this.value = value;\n        this.isComplete = isComplete;\n        this.hasLoadingMessage = hasLoadingMessage;\n    }\n}\n/**\n * Computing the hover is very fine tuned.\n *\n * Suppose the hover delay is 300ms (the default). Then, when resting the mouse at an anchor:\n * - at 150ms, the async computation is triggered (i.e. semantic hover)\n *   - if async results already come in, they are not rendered yet.\n * - at 300ms, the sync computation is triggered (i.e. decorations, markers)\n *   - if there are sync or async results, they are rendered.\n * - at 900ms, if the async computation hasn't finished, a \"Loading...\" result is added.\n */\nexport class HoverOperation extends Disposable {\n    constructor(_editor, _computer) {\n        super();\n        this._editor = _editor;\n        this._computer = _computer;\n        this._onResult = this._register(new Emitter());\n        this.onResult = this._onResult.event;\n        this._firstWaitScheduler = this._register(new RunOnceScheduler(() => this._triggerAsyncComputation(), 0));\n        this._secondWaitScheduler = this._register(new RunOnceScheduler(() => this._triggerSyncComputation(), 0));\n        this._loadingMessageScheduler = this._register(new RunOnceScheduler(() => this._triggerLoadingMessage(), 0));\n        this._state = 0 /* Idle */;\n        this._asyncIterable = null;\n        this._asyncIterableDone = false;\n        this._result = [];\n    }\n    dispose() {\n        if (this._asyncIterable) {\n            this._asyncIterable.cancel();\n            this._asyncIterable = null;\n        }\n        super.dispose();\n    }\n    get _hoverTime() {\n        return this._editor.getOption(53 /* hover */).delay;\n    }\n    get _firstWaitTime() {\n        return this._hoverTime / 2;\n    }\n    get _secondWaitTime() {\n        return this._hoverTime - this._firstWaitTime;\n    }\n    get _loadingMessageTime() {\n        return 3 * this._hoverTime;\n    }\n    _setState(state, fireResult = true) {\n        this._state = state;\n        if (fireResult) {\n            this._fireResult();\n        }\n    }\n    _triggerAsyncComputation() {\n        this._setState(2 /* SecondWait */);\n        this._secondWaitScheduler.schedule(this._secondWaitTime);\n        if (this._computer.computeAsync) {\n            this._asyncIterableDone = false;\n            this._asyncIterable = createCancelableAsyncIterable(token => this._computer.computeAsync(token));\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var e_1, _a;\n                try {\n                    try {\n                        for (var _b = __asyncValues(this._asyncIterable), _c; _c = yield _b.next(), !_c.done;) {\n                            const item = _c.value;\n                            if (item) {\n                                this._result.push(item);\n                                this._fireResult();\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    this._asyncIterableDone = true;\n                    if (this._state === 3 /* WaitingForAsync */ || this._state === 4 /* WaitingForAsyncShowingLoading */) {\n                        this._setState(0 /* Idle */);\n                    }\n                }\n                catch (e) {\n                    onUnexpectedError(e);\n                }\n            }))();\n        }\n        else {\n            this._asyncIterableDone = true;\n        }\n    }\n    _triggerSyncComputation() {\n        if (this._computer.computeSync) {\n            this._result = this._result.concat(this._computer.computeSync());\n        }\n        this._setState(this._asyncIterableDone ? 0 /* Idle */ : 3 /* WaitingForAsync */);\n    }\n    _triggerLoadingMessage() {\n        if (this._state === 3 /* WaitingForAsync */) {\n            this._setState(4 /* WaitingForAsyncShowingLoading */);\n        }\n    }\n    _fireResult() {\n        if (this._state === 1 /* FirstWait */ || this._state === 2 /* SecondWait */) {\n            // Do not send out results before the hover time\n            return;\n        }\n        const isComplete = (this._state === 0 /* Idle */);\n        const hasLoadingMessage = (this._state === 4 /* WaitingForAsyncShowingLoading */);\n        this._onResult.fire(new HoverResult(this._result.slice(0), isComplete, hasLoadingMessage));\n    }\n    start(mode) {\n        if (mode === 0 /* Delayed */) {\n            if (this._state === 0 /* Idle */) {\n                this._setState(1 /* FirstWait */);\n                this._firstWaitScheduler.schedule(this._firstWaitTime);\n                this._loadingMessageScheduler.schedule(this._loadingMessageTime);\n            }\n        }\n        else {\n            switch (this._state) {\n                case 0 /* Idle */:\n                    this._triggerAsyncComputation();\n                    this._secondWaitScheduler.cancel();\n                    this._triggerSyncComputation();\n                    break;\n                case 2 /* SecondWait */:\n                    this._secondWaitScheduler.cancel();\n                    this._triggerSyncComputation();\n                    break;\n            }\n        }\n    }\n    cancel() {\n        this._firstWaitScheduler.cancel();\n        this._secondWaitScheduler.cancel();\n        this._loadingMessageScheduler.cancel();\n        if (this._asyncIterable) {\n            this._asyncIterable.cancel();\n            this._asyncIterable = null;\n        }\n        this._result = [];\n        this._setState(0 /* Idle */, false);\n    }\n}\n",
      "start": 1711096856772,
      "end": 1711096856879,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856879,
      "end": 1711096856879,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856879,
      "end": 1711096856880,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856880,
      "end": 1711096856880,
      "order": "normal"
    }
  ]
}
