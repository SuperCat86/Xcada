{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/base/common/network.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from './platform.js';\nimport { URI } from './uri.js';\nexport var Schemas;\n(function (Schemas) {\n    /**\n     * A schema that is used for models that exist in memory\n     * only and that have no correspondence on a server or such.\n     */\n    Schemas.inMemory = 'inmemory';\n    /**\n     * A schema that is used for setting files\n     */\n    Schemas.vscode = 'vscode';\n    /**\n     * A schema that is used for internal private files\n     */\n    Schemas.internal = 'private';\n    /**\n     * A walk-through document.\n     */\n    Schemas.walkThrough = 'walkThrough';\n    /**\n     * An embedded code snippet.\n     */\n    Schemas.walkThroughSnippet = 'walkThroughSnippet';\n    Schemas.http = 'http';\n    Schemas.https = 'https';\n    Schemas.file = 'file';\n    Schemas.mailto = 'mailto';\n    Schemas.untitled = 'untitled';\n    Schemas.data = 'data';\n    Schemas.command = 'command';\n    Schemas.vscodeRemote = 'vscode-remote';\n    Schemas.vscodeRemoteResource = 'vscode-remote-resource';\n    Schemas.userData = 'vscode-userdata';\n    Schemas.vscodeCustomEditor = 'vscode-custom-editor';\n    Schemas.vscodeNotebook = 'vscode-notebook';\n    Schemas.vscodeNotebookCell = 'vscode-notebook-cell';\n    Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n    Schemas.vscodeNotebookCellOutput = 'vscode-notebook-cell-output';\n    Schemas.vscodeInteractive = 'vscode-interactive';\n    Schemas.vscodeInteractiveInput = 'vscode-interactive-input';\n    Schemas.vscodeSettings = 'vscode-settings';\n    Schemas.vscodeWorkspaceTrust = 'vscode-workspace-trust';\n    Schemas.vscodeTerminal = 'vscode-terminal';\n    /**\n     * Scheme used internally for webviews that aren't linked to a resource (i.e. not custom editors)\n     */\n    Schemas.webviewPanel = 'webview-panel';\n    /**\n     * Scheme used for loading the wrapper html and script in webviews.\n     */\n    Schemas.vscodeWebview = 'vscode-webview';\n    /**\n     * Scheme used for extension pages\n     */\n    Schemas.extension = 'extension';\n    /**\n     * Scheme used as a replacement of `file` scheme to load\n     * files with our custom protocol handler (desktop only).\n     */\n    Schemas.vscodeFileResource = 'vscode-file';\n    /**\n     * Scheme used for temporary resources\n     */\n    Schemas.tmp = 'tmp';\n    /**\n     * Scheme used vs live share\n     */\n    Schemas.vsls = 'vsls';\n})(Schemas || (Schemas = {}));\nexport const connectionTokenQueryName = 'tkn';\nclass RemoteAuthoritiesImpl {\n    constructor() {\n        this._hosts = Object.create(null);\n        this._ports = Object.create(null);\n        this._connectionTokens = Object.create(null);\n        this._preferredWebSchema = 'http';\n        this._delegate = null;\n    }\n    setPreferredWebSchema(schema) {\n        this._preferredWebSchema = schema;\n    }\n    rewrite(uri) {\n        if (this._delegate) {\n            return this._delegate(uri);\n        }\n        const authority = uri.authority;\n        let host = this._hosts[authority];\n        if (host && host.indexOf(':') !== -1) {\n            host = `[${host}]`;\n        }\n        const port = this._ports[authority];\n        const connectionToken = this._connectionTokens[authority];\n        let query = `path=${encodeURIComponent(uri.path)}`;\n        if (typeof connectionToken === 'string') {\n            query += `&${connectionTokenQueryName}=${encodeURIComponent(connectionToken)}`;\n        }\n        return URI.from({\n            scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n            authority: `${host}:${port}`,\n            path: `/vscode-remote-resource`,\n            query\n        });\n    }\n}\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\nclass FileAccessImpl {\n    asBrowserUri(uriOrModule, moduleIdToUrl) {\n        const uri = this.toUri(uriOrModule, moduleIdToUrl);\n        // Handle remote URIs via `RemoteAuthorities`\n        if (uri.scheme === Schemas.vscodeRemote) {\n            return RemoteAuthorities.rewrite(uri);\n        }\n        // Convert to `vscode-file` resource..\n        if (\n        // ...only ever for `file` resources\n        uri.scheme === Schemas.file &&\n            (\n            // ...and we run in native environments\n            platform.isNative ||\n                // ...or web worker extensions on desktop\n                (platform.isWebWorker && platform.globals.origin === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`))) {\n            return uri.with({\n                scheme: Schemas.vscodeFileResource,\n                // We need to provide an authority here so that it can serve\n                // as origin for network and loading matters in chromium.\n                // If the URI is not coming with an authority already, we\n                // add our own\n                authority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,\n                query: null,\n                fragment: null\n            });\n        }\n        return uri;\n    }\n    toUri(uriOrModule, moduleIdToUrl) {\n        if (URI.isUri(uriOrModule)) {\n            return uriOrModule;\n        }\n        return URI.parse(moduleIdToUrl.toUrl(uriOrModule));\n    }\n}\nFileAccessImpl.FALLBACK_AUTHORITY = 'vscode-app';\nexport const FileAccess = new FileAccessImpl();\n",
      "start": 1711096855284,
      "end": 1711096855361,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855361,
      "end": 1711096855361,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855361,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855362,
      "end": 1711096855362,
      "order": "normal"
    }
  ]
}
