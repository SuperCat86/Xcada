{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n        return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    }\n}\n",
      "start": 1711096857550,
      "end": 1711096857656,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857656,
      "end": 1711096857656,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857656,
      "end": 1711096857657,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857657,
      "end": 1711096857657,
      "order": "normal"
    }
  ]
}
