{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHints.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nexport class InlayHintAnchor {\n    constructor(range, direction) {\n        this.range = range;\n        this.direction = direction;\n    }\n}\nexport class InlayHintItem {\n    constructor(hint, anchor, provider) {\n        this.hint = hint;\n        this.anchor = anchor;\n        this.provider = provider;\n        this._isResolved = false;\n    }\n    with(delta) {\n        const result = new InlayHintItem(this.hint, delta.anchor, this.provider);\n        result._isResolved = this._isResolved;\n        result._currentResolve = this._currentResolve;\n        return result;\n    }\n    resolve(token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.provider.resolveInlayHint !== 'function') {\n                return;\n            }\n            if (this._currentResolve) {\n                // wait for an active resolve operation and try again\n                // when that's done.\n                yield this._currentResolve;\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                return this.resolve(token);\n            }\n            if (!this._isResolved) {\n                this._currentResolve = this._doResolve(token)\n                    .finally(() => this._currentResolve = undefined);\n            }\n            yield this._currentResolve;\n        });\n    }\n    _doResolve(token) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const newHint = yield Promise.resolve(this.provider.resolveInlayHint(this.hint, token));\n                this.hint.tooltip = (_a = newHint === null || newHint === void 0 ? void 0 : newHint.tooltip) !== null && _a !== void 0 ? _a : this.hint.tooltip;\n                this.hint.label = (_b = newHint === null || newHint === void 0 ? void 0 : newHint.label) !== null && _b !== void 0 ? _b : this.hint.label;\n                this._isResolved = true;\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n                this._isResolved = false;\n            }\n        });\n    }\n}\nexport class InlayHintsFragments {\n    constructor(ranges, data, model) {\n        this._disposables = new DisposableStore();\n        this.ranges = ranges;\n        this.provider = new Set();\n        const items = [];\n        for (const [list, provider] of data) {\n            this._disposables.add(list);\n            this.provider.add(provider);\n            for (const hint of list.hints) {\n                // compute the range to which the item should be attached to\n                let position = model.validatePosition(hint.position);\n                let direction = 'before';\n                const wordRange = InlayHintsFragments._getRangeAtPosition(model, position);\n                let range;\n                if (wordRange.getStartPosition().isBefore(position)) {\n                    range = Range.fromPositions(wordRange.getStartPosition(), position);\n                    direction = 'after';\n                }\n                else {\n                    range = Range.fromPositions(position, wordRange.getEndPosition());\n                    direction = 'before';\n                }\n                items.push(new InlayHintItem(hint, new InlayHintAnchor(range, direction), provider));\n            }\n        }\n        this.items = items.sort((a, b) => Position.compare(a.hint.position, b.hint.position));\n    }\n    static create(registry, model, ranges, token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = [];\n            const promises = registry.ordered(model).reverse().map(provider => ranges.map((range) => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const result = yield provider.provideInlayHints(model, range, token);\n                    if (result === null || result === void 0 ? void 0 : result.hints.length) {\n                        data.push([result, provider]);\n                    }\n                }\n                catch (err) {\n                    onUnexpectedExternalError(err);\n                }\n            })));\n            yield Promise.all(promises.flat());\n            if (token.isCancellationRequested || model.isDisposed()) {\n                throw new CancellationError();\n            }\n            return new InlayHintsFragments(ranges, data, model);\n        });\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n    static _getRangeAtPosition(model, position) {\n        const line = position.lineNumber;\n        const word = model.getWordAtPosition(position);\n        if (word) {\n            // always prefer the word range\n            return new Range(line, word.startColumn, line, word.endColumn);\n        }\n        model.tokenizeIfCheap(line);\n        const tokens = model.getLineTokens(line);\n        const offset = position.column - 1;\n        const idx = tokens.findTokenIndexAtOffset(offset);\n        let start = tokens.getStartOffset(idx);\n        let end = tokens.getEndOffset(idx);\n        if (end - start === 1) {\n            // single character token, when at its end try leading/trailing token instead\n            if (start === offset && idx > 1) {\n                // leading token\n                start = tokens.getStartOffset(idx - 1);\n                end = tokens.getEndOffset(idx - 1);\n            }\n            else if (end === offset && idx < tokens.getCount() - 1) {\n                // trailing token\n                start = tokens.getStartOffset(idx + 1);\n                end = tokens.getEndOffset(idx + 1);\n            }\n        }\n        return new Range(line, start + 1, line, end + 1);\n    }\n}\nexport function asCommandLink(command) {\n    return URI.from({\n        scheme: Schemas.command,\n        path: command.id,\n        query: command.arguments && encodeURIComponent(JSON.stringify(command.arguments))\n    }).toString();\n}\n",
      "start": 1711096856775,
      "end": 1711096856891,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856891,
      "end": 1711096856891,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856892,
      "end": 1711096856892,
      "order": "normal"
    }
  ]
}
