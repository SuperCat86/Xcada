{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/hiddenRangeModel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findFirstInSorted } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Range } from '../../../common/core/range.js';\nimport { countEOL } from '../../../common/core/eolCounter.js';\nexport class HiddenRangeModel {\n    constructor(model) {\n        this._updateEventEmitter = new Emitter();\n        this._hasLineChanges = false;\n        this._foldingModel = model;\n        this._foldingModelListener = model.onDidChange(_ => this.updateHiddenRanges());\n        this._hiddenRanges = [];\n        if (model.regions.length) {\n            this.updateHiddenRanges();\n        }\n    }\n    get onDidChange() { return this._updateEventEmitter.event; }\n    get hiddenRanges() { return this._hiddenRanges; }\n    notifyChangeModelContent(e) {\n        if (this._hiddenRanges.length && !this._hasLineChanges) {\n            this._hasLineChanges = e.changes.some(change => {\n                return change.range.endLineNumber !== change.range.startLineNumber || countEOL(change.text)[0] !== 0;\n            });\n        }\n    }\n    updateHiddenRanges() {\n        let updateHiddenAreas = false;\n        let newHiddenAreas = [];\n        let i = 0; // index into hidden\n        let k = 0;\n        let lastCollapsedStart = Number.MAX_VALUE;\n        let lastCollapsedEnd = -1;\n        let ranges = this._foldingModel.regions;\n        for (; i < ranges.length; i++) {\n            if (!ranges.isCollapsed(i)) {\n                continue;\n            }\n            let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n            let endLineNumber = ranges.getEndLineNumber(i);\n            if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\n                // ignore ranges contained in collapsed regions\n                continue;\n            }\n            if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {\n                // reuse the old ranges\n                newHiddenAreas.push(this._hiddenRanges[k]);\n                k++;\n            }\n            else {\n                updateHiddenAreas = true;\n                newHiddenAreas.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            }\n            lastCollapsedStart = startLineNumber;\n            lastCollapsedEnd = endLineNumber;\n        }\n        if (this._hasLineChanges || updateHiddenAreas || k < this._hiddenRanges.length) {\n            this.applyHiddenRanges(newHiddenAreas);\n        }\n    }\n    applyMemento(state) {\n        if (!Array.isArray(state) || state.length === 0) {\n            return false;\n        }\n        let hiddenRanges = [];\n        for (let r of state) {\n            if (!r.startLineNumber || !r.endLineNumber) {\n                return false;\n            }\n            hiddenRanges.push(new Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));\n        }\n        this.applyHiddenRanges(hiddenRanges);\n        return true;\n    }\n    /**\n     * Collapse state memento, for persistence only, only used if folding model is not yet initialized\n     */\n    getMemento() {\n        return this._hiddenRanges.map(r => ({ startLineNumber: r.startLineNumber - 1, endLineNumber: r.endLineNumber }));\n    }\n    applyHiddenRanges(newHiddenAreas) {\n        this._hiddenRanges = newHiddenAreas;\n        this._hasLineChanges = false;\n        this._updateEventEmitter.fire(newHiddenAreas);\n    }\n    hasRanges() {\n        return this._hiddenRanges.length > 0;\n    }\n    isHidden(line) {\n        return findRange(this._hiddenRanges, line) !== null;\n    }\n    adjustSelections(selections) {\n        let hasChanges = false;\n        let editorModel = this._foldingModel.textModel;\n        let lastRange = null;\n        let adjustLine = (line) => {\n            if (!lastRange || !isInside(line, lastRange)) {\n                lastRange = findRange(this._hiddenRanges, line);\n            }\n            if (lastRange) {\n                return lastRange.startLineNumber - 1;\n            }\n            return null;\n        };\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let selection = selections[i];\n            let adjustedStartLine = adjustLine(selection.startLineNumber);\n            if (adjustedStartLine) {\n                selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));\n                hasChanges = true;\n            }\n            let adjustedEndLine = adjustLine(selection.endLineNumber);\n            if (adjustedEndLine) {\n                selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));\n                hasChanges = true;\n            }\n            selections[i] = selection;\n        }\n        return hasChanges;\n    }\n    dispose() {\n        if (this.hiddenRanges.length > 0) {\n            this._hiddenRanges = [];\n            this._updateEventEmitter.fire(this._hiddenRanges);\n        }\n        if (this._foldingModelListener) {\n            this._foldingModelListener.dispose();\n            this._foldingModelListener = null;\n        }\n    }\n}\nfunction isInside(line, range) {\n    return line >= range.startLineNumber && line <= range.endLineNumber;\n}\nfunction findRange(ranges, line) {\n    let i = findFirstInSorted(ranges, r => line < r.startLineNumber) - 1;\n    if (i >= 0 && ranges[i].endLineNumber >= line) {\n        return ranges[i];\n    }\n    return null;\n}\n",
      "start": 1711096855633,
      "end": 1711096855748,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855748,
      "end": 1711096855748,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855748,
      "end": 1711096855749,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855749,
      "end": 1711096855749,
      "order": "normal"
    }
  ]
}
