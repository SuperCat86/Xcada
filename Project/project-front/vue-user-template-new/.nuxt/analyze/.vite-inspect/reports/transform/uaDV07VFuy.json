{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst emptyArr = new Array();\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n*/\nexport class SmallImmutableSet {\n    constructor(items, additionalItems) {\n        this.items = items;\n        this.additionalItems = additionalItems;\n    }\n    static create(items, additionalItems) {\n        if (items <= 128 && additionalItems.length === 0) {\n            // We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n            let cached = SmallImmutableSet.cache[items];\n            if (!cached) {\n                cached = new SmallImmutableSet(items, additionalItems);\n                SmallImmutableSet.cache[items] = cached;\n            }\n            return cached;\n        }\n        return new SmallImmutableSet(items, additionalItems);\n    }\n    static getEmpty() {\n        return this.empty;\n    }\n    add(value, keyProvider) {\n        const key = keyProvider.getKey(value);\n        let idx = key >> 5; // divided by 32\n        if (idx === 0) {\n            // fast path\n            const newItem = (1 << key) | this.items;\n            if (newItem === this.items) {\n                return this;\n            }\n            return SmallImmutableSet.create(newItem, this.additionalItems);\n        }\n        idx--;\n        const newItems = this.additionalItems.slice(0);\n        while (newItems.length < idx) {\n            newItems.push(0);\n        }\n        newItems[idx] |= 1 << (key & 31);\n        return SmallImmutableSet.create(this.items, newItems);\n    }\n    merge(other) {\n        const merged = this.items | other.items;\n        if (this.additionalItems === emptyArr && other.additionalItems === emptyArr) {\n            // fast path\n            if (merged === this.items) {\n                return this;\n            }\n            if (merged === other.items) {\n                return other;\n            }\n            return SmallImmutableSet.create(merged, emptyArr);\n        }\n        // This can be optimized, but it's not a common case\n        const newItems = new Array();\n        for (let i = 0; i < Math.max(this.additionalItems.length, other.additionalItems.length); i++) {\n            const item1 = this.additionalItems[i] || 0;\n            const item2 = other.additionalItems[i] || 0;\n            newItems.push(item1 | item2);\n        }\n        return SmallImmutableSet.create(merged, newItems);\n    }\n    intersects(other) {\n        if ((this.items & other.items) !== 0) {\n            return true;\n        }\n        for (let i = 0; i < Math.min(this.additionalItems.length, other.additionalItems.length); i++) {\n            if ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSmallImmutableSet.cache = new Array(129);\nSmallImmutableSet.empty = SmallImmutableSet.create(0, emptyArr);\nexport const identityKeyProvider = {\n    getKey(value) {\n        return value;\n    }\n};\n/**\n * Assigns values a unique incrementing key.\n*/\nexport class DenseKeyProvider {\n    constructor() {\n        this.items = new Map();\n    }\n    getKey(value) {\n        let existing = this.items.get(value);\n        if (existing === undefined) {\n            existing = this.items.size;\n            this.items.set(value, existing);\n        }\n        return existing;\n    }\n}\n",
      "start": 1711096857597,
      "end": 1711096857682,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857682,
      "end": 1711096857682,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    }
  ]
}
