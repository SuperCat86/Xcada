{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections) {\n        this.type = 3 /* ViewCursorStateChanged */;\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 9 /* ViewLinesChanged */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n",
      "start": 1711096856449,
      "end": 1711096856529,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856529,
      "end": 1711096856529,
      "order": "normal"
    }
  ]
}
