{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/parser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { InvalidBracketAstNode, ListAstNode, PairAstNode } from './ast.js';\nimport { BeforeEditPositionMapper } from './beforeEditPositionMapper.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nimport { lengthIsZero, lengthLessThan } from './length.js';\nimport { concat23Trees, concat23TreesOfSameHeight } from './concat23Trees.js';\nimport { NodeReader } from './nodeReader.js';\n/**\n * Non incrementally built ASTs are immutable.\n*/\nexport function parseDocument(tokenizer, edits, oldNode, createImmutableLists) {\n    const parser = new Parser(tokenizer, edits, oldNode, createImmutableLists);\n    return parser.parseDocument();\n}\n/**\n * Non incrementally built ASTs are immutable.\n*/\nclass Parser {\n    constructor(tokenizer, edits, oldNode, createImmutableLists) {\n        this.tokenizer = tokenizer;\n        this.createImmutableLists = createImmutableLists;\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        if (oldNode && createImmutableLists) {\n            throw new Error('Not supported');\n        }\n        this.oldNodeReader = oldNode ? new NodeReader(oldNode) : undefined;\n        this.positionMapper = new BeforeEditPositionMapper(edits, tokenizer.length);\n    }\n    parseDocument() {\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        let result = this.parseList(SmallImmutableSet.getEmpty());\n        if (!result) {\n            result = ListAstNode.getEmpty();\n        }\n        return result;\n    }\n    parseList(openedBracketIds) {\n        const items = new Array();\n        while (true) {\n            const token = this.tokenizer.peek();\n            if (!token ||\n                (token.kind === 2 /* ClosingBracket */ &&\n                    token.bracketIds.intersects(openedBracketIds))) {\n                break;\n            }\n            const child = this.parseChild(openedBracketIds);\n            if (child.kind === 4 /* List */ && child.childrenLength === 0) {\n                continue;\n            }\n            items.push(child);\n        }\n        // When there is no oldNodeReader, all items are created from scratch and must have the same height.\n        const result = this.oldNodeReader ? concat23Trees(items) : concat23TreesOfSameHeight(items, this.createImmutableLists);\n        return result;\n    }\n    parseChild(openedBracketIds) {\n        if (this.oldNodeReader) {\n            const maxCacheableLength = this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);\n            if (!lengthIsZero(maxCacheableLength)) {\n                const cachedNode = this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset), curNode => {\n                    if (!lengthLessThan(curNode.length, maxCacheableLength)) {\n                        // Either the node contains edited text or touches edited text.\n                        // In the latter case, brackets might have been extended (`end` -> `ending`), so even touching nodes cannot be reused.\n                        return false;\n                    }\n                    const canBeReused = curNode.canBeReused(openedBracketIds);\n                    return canBeReused;\n                });\n                if (cachedNode) {\n                    this._itemsFromCache++;\n                    this.tokenizer.skip(cachedNode.length);\n                    return cachedNode;\n                }\n            }\n        }\n        this._itemsConstructed++;\n        const token = this.tokenizer.read();\n        switch (token.kind) {\n            case 2 /* ClosingBracket */:\n                return new InvalidBracketAstNode(token.bracketIds, token.length);\n            case 0 /* Text */:\n                return token.astNode;\n            case 1 /* OpeningBracket */: {\n                const set = openedBracketIds.merge(token.bracketIds);\n                const child = this.parseList(set);\n                const nextToken = this.tokenizer.peek();\n                if (nextToken &&\n                    nextToken.kind === 2 /* ClosingBracket */ &&\n                    (nextToken.bracketId === token.bracketId || nextToken.bracketIds.intersects(token.bracketIds))) {\n                    this.tokenizer.read();\n                    return PairAstNode.create(token.astNode, child, nextToken.astNode);\n                }\n                else {\n                    return PairAstNode.create(token.astNode, child, null);\n                }\n            }\n            default:\n                throw new Error('unexpected');\n        }\n    }\n}\n",
      "start": 1711096857593,
      "end": 1711096857683,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857683,
      "end": 1711096857683,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857684,
      "end": 1711096857684,
      "order": "normal"
    }
  ]
}
