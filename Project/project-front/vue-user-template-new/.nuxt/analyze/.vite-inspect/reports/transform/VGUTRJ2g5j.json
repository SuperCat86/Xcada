{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { withNullAsUndefined } from '../../../../base/common/types.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport class AbstractEditorNavigationQuickAccessProvider {\n    constructor(options) {\n        this.options = options;\n        //#endregion\n        //#region Decorations Utils\n        this.rangeHighlightDecorationId = undefined;\n    }\n    //#region Provider methods\n    provide(picker, token) {\n        var _a;\n        const disposables = new DisposableStore();\n        // Apply options if any\n        picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);\n        // Disable filtering & sorting, we control the results\n        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n        // Provide based on current active editor\n        const pickerDisposable = disposables.add(new MutableDisposable());\n        pickerDisposable.value = this.doProvide(picker, token);\n        // Re-create whenever the active editor changes\n        disposables.add(this.onDidActiveTextEditorControlChange(() => {\n            // Clear old\n            pickerDisposable.value = undefined;\n            // Add new\n            pickerDisposable.value = this.doProvide(picker, token);\n        }));\n        return disposables;\n    }\n    doProvide(picker, token) {\n        const disposables = new DisposableStore();\n        // With text control\n        const editor = this.activeTextEditorControl;\n        if (editor && this.canProvideWithTextEditor(editor)) {\n            const context = { editor };\n            // Restore any view state if this picker was closed\n            // without actually going to a line\n            const codeEditor = getCodeEditor(editor);\n            if (codeEditor) {\n                // Remember view state and update it when the cursor position\n                // changes even later because it could be that the user has\n                // configured quick access to remain open when focus is lost and\n                // we always want to restore the current location.\n                let lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n                disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n                    lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n                }));\n                context.restoreViewState = () => {\n                    if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n                        editor.restoreViewState(lastKnownEditorViewState);\n                    }\n                };\n                disposables.add(once(token.onCancellationRequested)(() => { var _a; return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context); }));\n            }\n            // Clean up decorations on dispose\n            disposables.add(toDisposable(() => this.clearDecorations(editor)));\n            // Ask subclass for entries\n            disposables.add(this.provideWithTextEditor(context, picker, token));\n        }\n        // Without text control\n        else {\n            disposables.add(this.provideWithoutTextEditor(picker, token));\n        }\n        return disposables;\n    }\n    /**\n     * Subclasses to implement if they can operate on the text editor.\n     */\n    canProvideWithTextEditor(editor) {\n        return true;\n    }\n    gotoLocation({ editor }, options) {\n        editor.setSelection(options.range);\n        editor.revealRangeInCenter(options.range, 0 /* Smooth */);\n        if (!options.preserveFocus) {\n            editor.focus();\n        }\n    }\n    getModel(editor) {\n        var _a;\n        return isDiffEditor(editor) ?\n            (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified :\n            editor.getModel();\n    }\n    addDecorations(editor, range) {\n        editor.changeDecorations(changeAccessor => {\n            // Reset old decorations if any\n            const deleteDecorations = [];\n            if (this.rangeHighlightDecorationId) {\n                deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n                deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n                this.rangeHighlightDecorationId = undefined;\n            }\n            // Add new decorations for the range\n            const newDecorations = [\n                // highlight the entire line on the range\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight',\n                        className: 'rangeHighlight',\n                        isWholeLine: true\n                    }\n                },\n                // also add overview ruler highlight\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight-overview',\n                        overviewRuler: {\n                            color: themeColorFromId(overviewRulerRangeHighlight),\n                            position: OverviewRulerLane.Full\n                        }\n                    }\n                }\n            ];\n            const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n            this.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n        });\n    }\n    clearDecorations(editor) {\n        const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n        if (rangeHighlightDecorationId) {\n            editor.changeDecorations(changeAccessor => {\n                changeAccessor.deltaDecorations([\n                    rangeHighlightDecorationId.overviewRulerDecorationId,\n                    rangeHighlightDecorationId.rangeHighlightId\n                ], []);\n            });\n            this.rangeHighlightDecorationId = undefined;\n        }\n    }\n}\n",
      "start": 1711096856103,
      "end": 1711096856193,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856193,
      "end": 1711096856194,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856194,
      "end": 1711096856194,
      "order": "normal"
    }
  ]
}
