{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ICommandService = createDecorator('commandService');\nexport const CommandsRegistry = new class {\n    constructor() {\n        this._commands = new Map();\n        this._onDidRegisterCommand = new Emitter();\n        this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n    }\n    registerCommand(idOrCommand, handler) {\n        if (!idOrCommand) {\n            throw new Error(`invalid command`);\n        }\n        if (typeof idOrCommand === 'string') {\n            if (!handler) {\n                throw new Error(`invalid command`);\n            }\n            return this.registerCommand({ id: idOrCommand, handler });\n        }\n        // add argument validation if rich command metadata is provided\n        if (idOrCommand.description) {\n            const constraints = [];\n            for (let arg of idOrCommand.description.args) {\n                constraints.push(arg.constraint);\n            }\n            const actualHandler = idOrCommand.handler;\n            idOrCommand.handler = function (accessor, ...args) {\n                validateConstraints(args, constraints);\n                return actualHandler(accessor, ...args);\n            };\n        }\n        // find a place to store the command\n        const { id } = idOrCommand;\n        let commands = this._commands.get(id);\n        if (!commands) {\n            commands = new LinkedList();\n            this._commands.set(id, commands);\n        }\n        let removeFn = commands.unshift(idOrCommand);\n        let ret = toDisposable(() => {\n            removeFn();\n            const command = this._commands.get(id);\n            if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\n                this._commands.delete(id);\n            }\n        });\n        // tell the world about this command\n        this._onDidRegisterCommand.fire(id);\n        return ret;\n    }\n    registerCommandAlias(oldId, newId) {\n        return CommandsRegistry.registerCommand(oldId, (accessor, ...args) => accessor.get(ICommandService).executeCommand(newId, ...args));\n    }\n    getCommand(id) {\n        const list = this._commands.get(id);\n        if (!list || list.isEmpty()) {\n            return undefined;\n        }\n        return Iterable.first(list);\n    }\n    getCommands() {\n        const result = new Map();\n        for (const key of this._commands.keys()) {\n            const command = this.getCommand(key);\n            if (command) {\n                result.set(key, command);\n            }\n        }\n        return result;\n    }\n};\nexport const NullCommandService = {\n    _serviceBrand: undefined,\n    onWillExecuteCommand: () => Disposable.None,\n    onDidExecuteCommand: () => Disposable.None,\n    executeCommand() {\n        return Promise.resolve(undefined);\n    }\n};\nCommandsRegistry.registerCommand('noop', () => { });\n",
      "start": 1711096855024,
      "end": 1711096855092,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855092,
      "end": 1711096855092,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855092,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855093,
      "end": 1711096855093,
      "order": "normal"
    }
  ]
}
