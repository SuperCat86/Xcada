{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\n/**\n * Create a word definition regular expression based on default word separators.\n * Optionally provide allowed separators that should be included in words.\n *\n * The default would look like this:\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n */\nfunction createWordRegExp(allowInWords = '') {\n    let source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\n    for (const sep of USUAL_WORD_SEPARATORS) {\n        if (allowInWords.indexOf(sep) >= 0) {\n            continue;\n        }\n        source += '\\\\' + sep;\n    }\n    source += '\\\\s]+)';\n    return new RegExp(source, 'g');\n}\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\nexport const DEFAULT_WORD_REGEXP = createWordRegExp();\nexport function ensureValidWordDefinition(wordDefinition) {\n    let result = DEFAULT_WORD_REGEXP;\n    if (wordDefinition && (wordDefinition instanceof RegExp)) {\n        if (!wordDefinition.global) {\n            let flags = 'g';\n            if (wordDefinition.ignoreCase) {\n                flags += 'i';\n            }\n            if (wordDefinition.multiline) {\n                flags += 'm';\n            }\n            if (wordDefinition.unicode) {\n                flags += 'u';\n            }\n            result = new RegExp(wordDefinition.source, flags);\n        }\n        else {\n            result = wordDefinition;\n        }\n    }\n    result.lastIndex = 0;\n    return result;\n}\nconst _defaultConfig = {\n    maxLen: 1000,\n    windowSize: 15,\n    timeBudget: 150\n};\nexport function getWordAtText(column, wordDefinition, text, textOffset, config = _defaultConfig) {\n    if (text.length > config.maxLen) {\n        // don't throw strings that long at the regexp\n        // but use a sub-string in which a word must occur\n        let start = column - config.maxLen / 2;\n        if (start < 0) {\n            start = 0;\n        }\n        else {\n            textOffset += start;\n        }\n        text = text.substring(start, column + config.maxLen / 2);\n        return getWordAtText(column, wordDefinition, text, textOffset, config);\n    }\n    const t1 = Date.now();\n    const pos = column - 1 - textOffset;\n    let prevRegexIndex = -1;\n    let match = null;\n    for (let i = 1;; i++) {\n        // check time budget\n        if (Date.now() - t1 >= config.timeBudget) {\n            break;\n        }\n        // reset the index at which the regexp should start matching, also know where it\n        // should stop so that subsequent search don't repeat previous searches\n        const regexIndex = pos - config.windowSize * i;\n        wordDefinition.lastIndex = Math.max(0, regexIndex);\n        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\n        if (!thisMatch && match) {\n            // stop: we have something\n            break;\n        }\n        match = thisMatch;\n        // stop: searched at start\n        if (regexIndex <= 0) {\n            break;\n        }\n        prevRegexIndex = regexIndex;\n    }\n    if (match) {\n        const result = {\n            word: match[0],\n            startColumn: textOffset + 1 + match.index,\n            endColumn: textOffset + 1 + match.index + match[0].length\n        };\n        wordDefinition.lastIndex = 0;\n        return result;\n    }\n    return null;\n}\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\n    let match;\n    while (match = wordDefinition.exec(text)) {\n        const matchIndex = match.index || 0;\n        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\n            return match;\n        }\n        else if (stopPos > 0 && matchIndex > stopPos) {\n            return null;\n        }\n    }\n    return null;\n}\n",
      "start": 1711096855170,
      "end": 1711096855294,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096855294,
      "end": 1711096855294,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096855294,
      "end": 1711096855295,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096855295,
      "end": 1711096855295,
      "order": "normal"
    }
  ]
}
