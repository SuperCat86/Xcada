{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._map = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    fire(languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    }\n    register(language, support) {\n        this._map.set(language, support);\n        this.fire([language]);\n        return toDisposable(() => {\n            if (this._map.get(language) !== support) {\n                return;\n            }\n            this._map.delete(language);\n            this.fire([language]);\n        });\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    get(language) {\n        return (this._map.get(language) || null);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._map.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* DefaultBackground */) {\n            return this._colorMap[2 /* DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    get isResolved() {\n        return this._isResolved;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield Promise.resolve(this._factory.createTokenizationSupport());\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n",
      "start": 1711096856096,
      "end": 1711096856192,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856192,
      "end": 1711096856192,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856192,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856193,
      "end": 1711096856193,
      "order": "normal"
    }
  ]
}
