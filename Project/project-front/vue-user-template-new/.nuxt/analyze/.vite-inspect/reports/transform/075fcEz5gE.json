{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * Given a file, return the best matching mime types for it\n * based on the registered language associations.\n */\nexport function getMimeTypes(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [Mimes.unknown];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getMimeByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, Mimes.text];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getMimeByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, Mimes.text];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getMimeByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, Mimes.text];\n        }\n    }\n    return [Mimes.unknown];\n}\nfunction getMimeByPath(path, filename, associations) {\n    var _a;\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if ((_a = association.filepatternLowercase) === null || _a === void 0 ? void 0 : _a.call(association, target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch.mime;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch.mime;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch.mime;\n    }\n    return undefined;\n}\nfunction getMimeByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association.mime;\n            }\n        }\n    }\n    return undefined;\n}\n",
      "start": 1711096857517,
      "end": 1711096857597,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096857597,
      "end": 1711096857597,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096857598,
      "end": 1711096857598,
      "order": "normal"
    }
  ]
}
