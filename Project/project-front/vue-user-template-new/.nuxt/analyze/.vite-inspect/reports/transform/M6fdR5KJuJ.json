{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { implies, expressionsAreEqualWithConstantSubstitution } from '../../contextkey/common/contextkey.js';\nexport class KeybindingResolver {\n    constructor(defaultKeybindings, overrides, log) {\n        this._log = log;\n        this._defaultKeybindings = defaultKeybindings;\n        this._defaultBoundCommands = new Map();\n        for (const defaultKeybinding of defaultKeybindings) {\n            const command = defaultKeybinding.command;\n            if (command && command.charAt(0) !== '-') {\n                this._defaultBoundCommands.set(command, true);\n            }\n        }\n        this._map = new Map();\n        this._lookupMap = new Map();\n        this._keybindings = KeybindingResolver.handleRemovals([].concat(defaultKeybindings).concat(overrides));\n        for (let i = 0, len = this._keybindings.length; i < len; i++) {\n            let k = this._keybindings[i];\n            if (k.keypressParts.length === 0) {\n                // unbound\n                continue;\n            }\n            if (k.when && k.when.type === 0 /* False */) {\n                // when condition is false\n                continue;\n            }\n            // TODO@chords\n            this._addKeyPress(k.keypressParts[0], k);\n        }\n    }\n    static _isTargetedForRemoval(defaultKb, keypressFirstPart, keypressChordPart, when) {\n        // TODO@chords\n        if (keypressFirstPart && defaultKb.keypressParts[0] !== keypressFirstPart) {\n            return false;\n        }\n        // TODO@chords\n        if (keypressChordPart && defaultKb.keypressParts[1] !== keypressChordPart) {\n            return false;\n        }\n        if (when) {\n            if (!defaultKb.when) {\n                return false;\n            }\n            if (!expressionsAreEqualWithConstantSubstitution(when, defaultKb.when)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Looks for rules containing \"-commandId\" and removes them.\n     */\n    static handleRemovals(rules) {\n        // Do a first pass and construct a hash-map for removals\n        const removals = new Map();\n        for (let i = 0, len = rules.length; i < len; i++) {\n            const rule = rules[i];\n            if (rule.command && rule.command.charAt(0) === '-') {\n                const command = rule.command.substring(1);\n                if (!removals.has(command)) {\n                    removals.set(command, [rule]);\n                }\n                else {\n                    removals.get(command).push(rule);\n                }\n            }\n        }\n        if (removals.size === 0) {\n            // There are no removals\n            return rules;\n        }\n        // Do a second pass and keep only non-removed keybindings\n        const result = [];\n        for (let i = 0, len = rules.length; i < len; i++) {\n            const rule = rules[i];\n            if (!rule.command || rule.command.length === 0) {\n                result.push(rule);\n                continue;\n            }\n            if (rule.command.charAt(0) === '-') {\n                continue;\n            }\n            const commandRemovals = removals.get(rule.command);\n            if (!commandRemovals || !rule.isDefault) {\n                result.push(rule);\n                continue;\n            }\n            let isRemoved = false;\n            for (const commandRemoval of commandRemovals) {\n                // TODO@chords\n                const keypressFirstPart = commandRemoval.keypressParts[0];\n                const keypressChordPart = commandRemoval.keypressParts[1];\n                const when = commandRemoval.when;\n                if (this._isTargetedForRemoval(rule, keypressFirstPart, keypressChordPart, when)) {\n                    isRemoved = true;\n                    break;\n                }\n            }\n            if (!isRemoved) {\n                result.push(rule);\n                continue;\n            }\n        }\n        return result;\n    }\n    _addKeyPress(keypress, item) {\n        const conflicts = this._map.get(keypress);\n        if (typeof conflicts === 'undefined') {\n            // There is no conflict so far\n            this._map.set(keypress, [item]);\n            this._addToLookupMap(item);\n            return;\n        }\n        for (let i = conflicts.length - 1; i >= 0; i--) {\n            let conflict = conflicts[i];\n            if (conflict.command === item.command) {\n                continue;\n            }\n            const conflictIsChord = (conflict.keypressParts.length > 1);\n            const itemIsChord = (item.keypressParts.length > 1);\n            // TODO@chords\n            if (conflictIsChord && itemIsChord && conflict.keypressParts[1] !== item.keypressParts[1]) {\n                // The conflict only shares the chord start with this command\n                continue;\n            }\n            if (KeybindingResolver.whenIsEntirelyIncluded(conflict.when, item.when)) {\n                // `item` completely overwrites `conflict`\n                // Remove conflict from the lookupMap\n                this._removeFromLookupMap(conflict);\n            }\n        }\n        conflicts.push(item);\n        this._addToLookupMap(item);\n    }\n    _addToLookupMap(item) {\n        if (!item.command) {\n            return;\n        }\n        let arr = this._lookupMap.get(item.command);\n        if (typeof arr === 'undefined') {\n            arr = [item];\n            this._lookupMap.set(item.command, arr);\n        }\n        else {\n            arr.push(item);\n        }\n    }\n    _removeFromLookupMap(item) {\n        if (!item.command) {\n            return;\n        }\n        let arr = this._lookupMap.get(item.command);\n        if (typeof arr === 'undefined') {\n            return;\n        }\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i] === item) {\n                arr.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * Returns true if it is provable `a` implies `b`.\n     */\n    static whenIsEntirelyIncluded(a, b) {\n        if (!b || b.type === 1 /* True */) {\n            return true;\n        }\n        if (!a || a.type === 1 /* True */) {\n            return false;\n        }\n        return implies(a, b);\n    }\n    getKeybindings() {\n        return this._keybindings;\n    }\n    lookupPrimaryKeybinding(commandId, context) {\n        const items = this._lookupMap.get(commandId);\n        if (typeof items === 'undefined' || items.length === 0) {\n            return null;\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        for (let i = items.length - 1; i >= 0; i--) {\n            const item = items[i];\n            if (context.contextMatchesRules(item.when)) {\n                return item;\n            }\n        }\n        return items[items.length - 1];\n    }\n    resolve(context, currentChord, keypress) {\n        this._log(`| Resolving ${keypress}${currentChord ? ` chorded from ${currentChord}` : ``}`);\n        let lookupMap = null;\n        if (currentChord !== null) {\n            // Fetch all chord bindings for `currentChord`\n            const candidates = this._map.get(currentChord);\n            if (typeof candidates === 'undefined') {\n                // No chords starting with `currentChord`\n                this._log(`\\\\ No keybinding entries.`);\n                return null;\n            }\n            lookupMap = [];\n            for (let i = 0, len = candidates.length; i < len; i++) {\n                let candidate = candidates[i];\n                // TODO@chords\n                if (candidate.keypressParts[1] === keypress) {\n                    lookupMap.push(candidate);\n                }\n            }\n        }\n        else {\n            const candidates = this._map.get(keypress);\n            if (typeof candidates === 'undefined') {\n                // No bindings with `keypress`\n                this._log(`\\\\ No keybinding entries.`);\n                return null;\n            }\n            lookupMap = candidates;\n        }\n        let result = this._findCommand(context, lookupMap);\n        if (!result) {\n            this._log(`\\\\ From ${lookupMap.length} keybinding entries, no when clauses matched the context.`);\n            return null;\n        }\n        // TODO@chords\n        if (currentChord === null && result.keypressParts.length > 1 && result.keypressParts[1] !== null) {\n            this._log(`\\\\ From ${lookupMap.length} keybinding entries, matched chord, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n            return {\n                enterChord: true,\n                leaveChord: false,\n                commandId: null,\n                commandArgs: null,\n                bubble: false\n            };\n        }\n        this._log(`\\\\ From ${lookupMap.length} keybinding entries, matched ${result.command}, when: ${printWhenExplanation(result.when)}, source: ${printSourceExplanation(result)}.`);\n        return {\n            enterChord: false,\n            leaveChord: result.keypressParts.length > 1,\n            commandId: result.command,\n            commandArgs: result.commandArgs,\n            bubble: result.bubble\n        };\n    }\n    _findCommand(context, matches) {\n        for (let i = matches.length - 1; i >= 0; i--) {\n            let k = matches[i];\n            if (!KeybindingResolver._contextMatchesRules(context, k.when)) {\n                continue;\n            }\n            return k;\n        }\n        return null;\n    }\n    static _contextMatchesRules(context, rules) {\n        if (!rules) {\n            return true;\n        }\n        return rules.evaluate(context);\n    }\n}\nfunction printWhenExplanation(when) {\n    if (!when) {\n        return `no when condition`;\n    }\n    return `${when.serialize()}`;\n}\nfunction printSourceExplanation(kb) {\n    return (kb.extensionId\n        ? (kb.isBuiltinExtension ? `built-in extension ${kb.extensionId}` : `user extension ${kb.extensionId}`)\n        : (kb.isDefault ? `built-in` : `user`));\n}\n",
      "start": 1711096856207,
      "end": 1711096856299,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856299,
      "end": 1711096856299,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856299,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856300,
      "end": 1711096856300,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856301,
      "end": 1711096856301,
      "order": "normal"
    }
  ]
}
