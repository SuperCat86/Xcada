{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n}\n",
      "start": 1711096856448,
      "end": 1711096856531,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856531,
      "end": 1711096856531,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856531,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856532,
      "end": 1711096856532,
      "order": "normal"
    }
  ]
}
