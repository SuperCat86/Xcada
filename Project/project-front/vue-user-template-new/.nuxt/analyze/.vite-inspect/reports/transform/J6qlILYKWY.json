{
  "resolvedId": "D:/Project/Project/project-front/vue-user-template-new/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/completionModel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { quickSelect } from '../../../../base/common/arrays.js';\nimport { anyScore, fuzzyScore, FuzzyScore, fuzzyScoreGracefulAggressive } from '../../../../base/common/filters.js';\nimport { compareIgnoreCase } from '../../../../base/common/strings.js';\nexport class LineContext {\n    constructor(leadingLineContent, characterCountDelta) {\n        this.leadingLineContent = leadingLineContent;\n        this.characterCountDelta = characterCountDelta;\n    }\n}\n/**\n * Sorted, filtered completion view model\n * */\nexport class CompletionModel {\n    constructor(items, column, lineContext, wordDistance, options, snippetSuggestions, clipboardText) {\n        this.clipboardText = clipboardText;\n        this._snippetCompareFn = CompletionModel._compareCompletionItems;\n        this._items = items;\n        this._column = column;\n        this._wordDistance = wordDistance;\n        this._options = options;\n        this._refilterKind = 1 /* All */;\n        this._lineContext = lineContext;\n        if (snippetSuggestions === 'top') {\n            this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsUp;\n        }\n        else if (snippetSuggestions === 'bottom') {\n            this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsDown;\n        }\n    }\n    get lineContext() {\n        return this._lineContext;\n    }\n    set lineContext(value) {\n        if (this._lineContext.leadingLineContent !== value.leadingLineContent\n            || this._lineContext.characterCountDelta !== value.characterCountDelta) {\n            this._refilterKind = this._lineContext.characterCountDelta < value.characterCountDelta && this._filteredItems ? 2 /* Incr */ : 1 /* All */;\n            this._lineContext = value;\n        }\n    }\n    get items() {\n        this._ensureCachedState();\n        return this._filteredItems;\n    }\n    get allProvider() {\n        this._ensureCachedState();\n        return this._providerInfo.keys();\n    }\n    get incomplete() {\n        this._ensureCachedState();\n        const result = new Set();\n        for (let [provider, incomplete] of this._providerInfo) {\n            if (incomplete) {\n                result.add(provider);\n            }\n        }\n        return result;\n    }\n    adopt(except) {\n        let res = [];\n        for (let i = 0; i < this._items.length;) {\n            if (!except.has(this._items[i].provider)) {\n                res.push(this._items[i]);\n                // unordered removed\n                this._items[i] = this._items[this._items.length - 1];\n                this._items.pop();\n            }\n            else {\n                // continue with next item\n                i++;\n            }\n        }\n        this._refilterKind = 1 /* All */;\n        return res;\n    }\n    get stats() {\n        this._ensureCachedState();\n        return this._stats;\n    }\n    _ensureCachedState() {\n        if (this._refilterKind !== 0 /* Nothing */) {\n            this._createCachedState();\n        }\n    }\n    _createCachedState() {\n        this._providerInfo = new Map();\n        const labelLengths = [];\n        const { leadingLineContent, characterCountDelta } = this._lineContext;\n        let word = '';\n        let wordLow = '';\n        // incrementally filter less\n        const source = this._refilterKind === 1 /* All */ ? this._items : this._filteredItems;\n        const target = [];\n        // picks a score function based on the number of\n        // items that we have to score/filter and based on the\n        // user-configuration\n        const scoreFn = (!this._options.filterGraceful || source.length > 2000) ? fuzzyScore : fuzzyScoreGracefulAggressive;\n        for (let i = 0; i < source.length; i++) {\n            const item = source[i];\n            if (item.isInvalid) {\n                continue; // SKIP invalid items\n            }\n            // collect all support, know if their result is incomplete\n            this._providerInfo.set(item.provider, Boolean(item.container.incomplete));\n            // 'word' is that remainder of the current line that we\n            // filter and score against. In theory each suggestion uses a\n            // different word, but in practice not - that's why we cache\n            const overwriteBefore = item.position.column - item.editStart.column;\n            const wordLen = overwriteBefore + characterCountDelta - (item.position.column - this._column);\n            if (word.length !== wordLen) {\n                word = wordLen === 0 ? '' : leadingLineContent.slice(-wordLen);\n                wordLow = word.toLowerCase();\n            }\n            // remember the word against which this item was\n            // scored\n            item.word = word;\n            if (wordLen === 0) {\n                // when there is nothing to score against, don't\n                // event try to do. Use a const rank and rely on\n                // the fallback-sort using the initial sort order.\n                // use a score of `-100` because that is out of the\n                // bound of values `fuzzyScore` will return\n                item.score = FuzzyScore.Default;\n            }\n            else {\n                // skip word characters that are whitespace until\n                // we have hit the replace range (overwriteBefore)\n                let wordPos = 0;\n                while (wordPos < overwriteBefore) {\n                    const ch = word.charCodeAt(wordPos);\n                    if (ch === 32 /* Space */ || ch === 9 /* Tab */) {\n                        wordPos += 1;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (wordPos >= wordLen) {\n                    // the wordPos at which scoring starts is the whole word\n                    // and therefore the same rules as not having a word apply\n                    item.score = FuzzyScore.Default;\n                }\n                else if (typeof item.completion.filterText === 'string') {\n                    // when there is a `filterText` it must match the `word`.\n                    // if it matches we check with the label to compute highlights\n                    // and if that doesn't yield a result we have no highlights,\n                    // despite having the match\n                    let match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow, 0, false);\n                    if (!match) {\n                        continue; // NO match\n                    }\n                    if (compareIgnoreCase(item.completion.filterText, item.textLabel) === 0) {\n                        // filterText and label are actually the same -> use good highlights\n                        item.score = match;\n                    }\n                    else {\n                        // re-run the scorer on the label in the hope of a result BUT use the rank\n                        // of the filterText-match\n                        item.score = anyScore(word, wordLow, wordPos, item.textLabel, item.labelLow, 0);\n                        item.score[0] = match[0]; // use score from filterText\n                    }\n                }\n                else {\n                    // by default match `word` against the `label`\n                    let match = scoreFn(word, wordLow, wordPos, item.textLabel, item.labelLow, 0, false);\n                    if (!match) {\n                        continue; // NO match\n                    }\n                    item.score = match;\n                }\n            }\n            item.idx = i;\n            item.distance = this._wordDistance.distance(item.position, item.completion);\n            target.push(item);\n            // update stats\n            labelLengths.push(item.textLabel.length);\n        }\n        this._filteredItems = target.sort(this._snippetCompareFn);\n        this._refilterKind = 0 /* Nothing */;\n        this._stats = {\n            pLabelLen: labelLengths.length ?\n                quickSelect(labelLengths.length - .85, labelLengths, (a, b) => a - b)\n                : 0\n        };\n    }\n    static _compareCompletionItems(a, b) {\n        if (a.score[0] > b.score[0]) {\n            return -1;\n        }\n        else if (a.score[0] < b.score[0]) {\n            return 1;\n        }\n        else if (a.distance < b.distance) {\n            return -1;\n        }\n        else if (a.distance > b.distance) {\n            return 1;\n        }\n        else if (a.idx < b.idx) {\n            return -1;\n        }\n        else if (a.idx > b.idx) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    static _compareCompletionItemsSnippetsDown(a, b) {\n        if (a.completion.kind !== b.completion.kind) {\n            if (a.completion.kind === 27 /* Snippet */) {\n                return 1;\n            }\n            else if (b.completion.kind === 27 /* Snippet */) {\n                return -1;\n            }\n        }\n        return CompletionModel._compareCompletionItems(a, b);\n    }\n    static _compareCompletionItemsSnippetsUp(a, b) {\n        if (a.completion.kind !== b.completion.kind) {\n            if (a.completion.kind === 27 /* Snippet */) {\n                return -1;\n            }\n            else if (b.completion.kind === 27 /* Snippet */) {\n                return 1;\n            }\n        }\n        return CompletionModel._compareCompletionItems(a, b);\n    }\n}\n",
      "start": 1711096856828,
      "end": 1711096856946,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711096856946,
      "end": 1711096856946,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711096856946,
      "end": 1711096856946,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711096856946,
      "end": 1711096856946,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711096856947,
      "end": 1711096856947,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711096856947,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711096856948,
      "end": 1711096856948,
      "order": "normal"
    }
  ]
}
